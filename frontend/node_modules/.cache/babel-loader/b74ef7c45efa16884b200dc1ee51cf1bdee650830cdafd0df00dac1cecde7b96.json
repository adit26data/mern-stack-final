{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildRootGroup, GRID_ROOT_GROUP_ID } from './gridRowsUtils';\nvar createFlatRowTree = function createFlatRowTree(rows) {\n  var tree = _defineProperty({}, GRID_ROOT_GROUP_ID, _extends({}, buildRootGroup(), {\n    children: rows\n  }));\n  for (var i = 0; i < rows.length; i += 1) {\n    var rowId = rows[i];\n    tree[rowId] = {\n      id: rowId,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree: tree,\n    treeDepths: {\n      0: rows.length\n    },\n    dataRowIds: rows\n  };\n};\nvar updateFlatRowTree = function updateFlatRowTree(_ref) {\n  var previousTree = _ref.previousTree,\n    actions = _ref.actions;\n  var tree = _extends({}, previousTree);\n  var idsToRemoveFromRootGroup = {};\n  for (var i = 0; i < actions.remove.length; i += 1) {\n    var idToDelete = actions.remove[i];\n    idsToRemoveFromRootGroup[idToDelete] = true;\n    delete tree[idToDelete];\n  }\n  for (var _i = 0; _i < actions.insert.length; _i += 1) {\n    var idToInsert = actions.insert[_i];\n    tree[idToInsert] = {\n      id: idToInsert,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n\n  // TODO rows v6: Support row unpinning\n\n  var rootGroup = tree[GRID_ROOT_GROUP_ID];\n  var rootGroupChildren = [].concat(_toConsumableArray(rootGroup.children), _toConsumableArray(actions.insert));\n  if (Object.values(idsToRemoveFromRootGroup).length) {\n    rootGroupChildren = rootGroupChildren.filter(function (id) {\n      return !idsToRemoveFromRootGroup[id];\n    });\n  }\n  tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n    children: rootGroupChildren\n  });\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree: tree,\n    treeDepths: {\n      0: rootGroupChildren.length\n    },\n    dataRowIds: rootGroupChildren\n  };\n};\nvar flatRowTreeCreationMethod = function flatRowTreeCreationMethod(params) {\n  if (params.updates.type === 'full') {\n    return createFlatRowTree(params.updates.rows);\n  }\n  return updateFlatRowTree({\n    previousTree: params.previousTree,\n    actions: params.updates.actions\n  });\n};\nexport var useGridRowsPreProcessors = function useGridRowsPreProcessors(apiRef) {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};","map":{"version":3,"names":["_extends","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildRootGroup","GRID_ROOT_GROUP_ID","createFlatRowTree","rows","tree","_defineProperty","children","i","length","rowId","id","depth","parent","type","groupingKey","groupingName","treeDepths","dataRowIds","updateFlatRowTree","_ref","previousTree","actions","idsToRemoveFromRootGroup","remove","idToDelete","insert","idToInsert","rootGroup","rootGroupChildren","concat","_toConsumableArray","Object","values","filter","flatRowTreeCreationMethod","params","updates","useGridRowsPreProcessors","apiRef"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildRootGroup, GRID_ROOT_GROUP_ID } from './gridRowsUtils';\nconst createFlatRowTree = rows => {\n  const tree = {\n    [GRID_ROOT_GROUP_ID]: _extends({}, buildRootGroup(), {\n      children: rows\n    })\n  };\n  for (let i = 0; i < rows.length; i += 1) {\n    const rowId = rows[i];\n    tree[rowId] = {\n      id: rowId,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rows.length\n    },\n    dataRowIds: rows\n  };\n};\nconst updateFlatRowTree = ({\n  previousTree,\n  actions\n}) => {\n  const tree = _extends({}, previousTree);\n  const idsToRemoveFromRootGroup = {};\n  for (let i = 0; i < actions.remove.length; i += 1) {\n    const idToDelete = actions.remove[i];\n    idsToRemoveFromRootGroup[idToDelete] = true;\n    delete tree[idToDelete];\n  }\n  for (let i = 0; i < actions.insert.length; i += 1) {\n    const idToInsert = actions.insert[i];\n    tree[idToInsert] = {\n      id: idToInsert,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n\n  // TODO rows v6: Support row unpinning\n\n  const rootGroup = tree[GRID_ROOT_GROUP_ID];\n  let rootGroupChildren = [...rootGroup.children, ...actions.insert];\n  if (Object.values(idsToRemoveFromRootGroup).length) {\n    rootGroupChildren = rootGroupChildren.filter(id => !idsToRemoveFromRootGroup[id]);\n  }\n  tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n    children: rootGroupChildren\n  });\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rootGroupChildren.length\n    },\n    dataRowIds: rootGroupChildren\n  };\n};\nconst flatRowTreeCreationMethod = params => {\n  if (params.updates.type === 'full') {\n    return createFlatRowTree(params.updates.rows);\n  }\n  return updateFlatRowTree({\n    previousTree: params.previousTree,\n    actions: params.updates.actions\n  });\n};\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}