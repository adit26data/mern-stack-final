{"ast":null,"code":"import _slicedToArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce, unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nvar isTestEnvironment = process.env.NODE_ENV === 'test';\nvar hasScroll = function hasScroll(_ref) {\n  var content = _ref.content,\n    container = _ref.container,\n    scrollBarSize = _ref.scrollBarSize;\n  var hasScrollXIfNoYScrollBar = content.width > container.width;\n  var hasScrollYIfNoXScrollBar = content.height > container.height;\n  var hasScrollX = false;\n  var hasScrollY = false;\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height;\n\n    // We recalculate the scroll x to consider the size of the y scrollbar.\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n  return {\n    hasScrollX: hasScrollX,\n    hasScrollY: hasScrollY\n  };\n};\nexport function useGridDimensions(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useResizeContainer');\n  var errorShown = React.useRef(false);\n  var rootDimensionsRef = React.useRef(null);\n  var fullDimensionsRef = React.useRef(null);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  var rowHeight = Math.floor(props.rowHeight * densityFactor);\n  var totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  var updateGridDimensionsRef = React.useCallback(function () {\n    var _apiRef$current$rootE;\n    var rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    var columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    var pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n    var scrollBarSize;\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      var doc = ownerDocument(rootElement);\n      var scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n    var viewportOuterSize;\n    var hasScrollX;\n    var hasScrollY;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      var scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize: scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n    var viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    var newFullDimensions = {\n      viewportOuterSize: viewportOuterSize,\n      viewportInnerSize: viewportInnerSize,\n      hasScrollX: hasScrollX,\n      hasScrollY: hasScrollY,\n      scrollBarSize: scrollBarSize\n    };\n    var prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    savedSize = _React$useState2[0],\n    setSavedSize = _React$useState2[1];\n  var debouncedSetSavedSize = React.useMemo(function () {\n    return debounce(setSavedSize, 60);\n  }, []);\n  var previousSize = React.useRef();\n  useEnhancedEffect(function () {\n    if (savedSize) {\n      updateGridDimensionsRef();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateGridDimensionsRef]);\n\n  // This is the function called by apiRef.current.resize()\n  var resize = React.useCallback(function () {\n    apiRef.current.computeSizeAndPublishResizeEvent();\n  }, [apiRef]);\n  var getRootDimensions = React.useCallback(function () {\n    return fullDimensionsRef.current;\n  }, []);\n  var getViewportPageSize = React.useCallback(function () {\n    var dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return 0;\n    }\n    var currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      var renderContext = apiRef.current.getRenderContext();\n      var viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    var maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  var computeSizeAndPublishResizeEvent = React.useCallback(function () {\n    var _apiRef$current$mainE, _previousSize$current, _previousSize$current2;\n    var mainEl = (_apiRef$current$mainE = apiRef.current.mainElementRef) == null ? void 0 : _apiRef$current$mainE.current;\n    if (!mainEl) {\n      return;\n    }\n    var height = mainEl.clientHeight || 0;\n    var width = mainEl.clientWidth || 0;\n    var win = ownerWindow(mainEl);\n    var computedStyle = win.getComputedStyle(mainEl);\n    var paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n    var paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n    var paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n    var paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n    var newHeight = height - paddingTop - paddingBottom;\n    var newWidth = width - paddingLeft - paddingRight;\n    var hasHeightChanged = newHeight !== ((_previousSize$current = previousSize.current) == null ? void 0 : _previousSize$current.height);\n    var hasWidthChanged = newWidth !== ((_previousSize$current2 = previousSize.current) == null ? void 0 : _previousSize$current2.width);\n    if (!previousSize.current || hasHeightChanged || hasWidthChanged) {\n      var size = {\n        width: newWidth,\n        height: newHeight\n      };\n      apiRef.current.publishEvent('resize', size);\n      previousSize.current = size;\n    }\n  }, [apiRef]);\n  var dimensionsApi = {\n    resize: resize,\n    getRootDimensions: getRootDimensions\n  };\n  var dimensionsPrivateApi = {\n    getViewportPageSize: getViewportPageSize,\n    updateGridDimensionsRef: updateGridDimensionsRef,\n    computeSizeAndPublishResizeEvent: computeSizeAndPublishResizeEvent\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'public');\n  useGridApiMethod(apiRef, dimensionsPrivateApi, 'private');\n  var isFirstSizing = React.useRef(true);\n  var handleResize = React.useCallback(function (size) {\n    rootDimensionsRef.current = size;\n\n    // jsdom has no layout capabilities\n    var isJSDOM = /jsdom/.test(window.navigator.userAgent);\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(function () {\n    return updateGridDimensionsRef();\n  }, [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}","map":{"version":3,"names":["React","unstable_debounce","debounce","unstable_ownerDocument","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridColumnsTotalWidthSelector","gridDensityFactorSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","calculatePinnedRowsHeight","getTotalHeaderHeight","isTestEnvironment","process","env","NODE_ENV","hasScroll","_ref","content","container","scrollBarSize","hasScrollXIfNoYScrollBar","width","hasScrollYIfNoXScrollBar","height","hasScrollX","hasScrollY","useGridDimensions","apiRef","props","logger","errorShown","useRef","rootDimensionsRef","fullDimensionsRef","rowsMeta","densityFactor","rowHeight","Math","floor","totalHeaderHeight","columnHeaderHeight","updateGridDimensionsRef","useCallback","_apiRef$current$rootE","rootElement","current","rootElementRef","columnsTotalWidth","pinnedRowsHeight","scrollbarSize","doc","scrollDiv","createElement","style","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","viewportOuterSize","autoHeight","round","currentPageTotalHeight","scrollInformation","top","bottom","viewportInnerSize","newFullDimensions","prevDimensions","publishEvent","_React$useState","useState","_React$useState2","_slicedToArray","savedSize","setSavedSize","debouncedSetSavedSize","useMemo","previousSize","resize","computeSizeAndPublishResizeEvent","getRootDimensions","getViewportPageSize","dimensions","currentPage","pagination","paginationMode","getRowHeight","renderContext","getRenderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","_apiRef$current$mainE","_previousSize$current","_previousSize$current2","mainEl","mainElementRef","clientHeight","win","computedStyle","getComputedStyle","paddingLeft","parseInt","paddingRight","paddingTop","paddingBottom","newHeight","newWidth","hasHeightChanged","hasWidthChanged","size","dimensionsApi","dimensionsPrivateApi","isFirstSizing","handleResize","isJSDOM","test","window","navigator","userAgent","error","join","onResize"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_debounce as debounce, unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height;\n\n    // We recalculate the scroll x to consider the size of the y scrollbar.\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  const totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n    let scrollBarSize;\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);\n  const [savedSize, setSavedSize] = React.useState();\n  const debouncedSetSavedSize = React.useMemo(() => debounce(setSavedSize, 60), []);\n  const previousSize = React.useRef();\n  useEnhancedEffect(() => {\n    if (savedSize) {\n      updateGridDimensionsRef();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateGridDimensionsRef]);\n\n  // This is the function called by apiRef.current.resize()\n  const resize = React.useCallback(() => {\n    apiRef.current.computeSizeAndPublishResizeEvent();\n  }, [apiRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const computeSizeAndPublishResizeEvent = React.useCallback(() => {\n    var _apiRef$current$mainE, _previousSize$current, _previousSize$current2;\n    const mainEl = (_apiRef$current$mainE = apiRef.current.mainElementRef) == null ? void 0 : _apiRef$current$mainE.current;\n    if (!mainEl) {\n      return;\n    }\n    const height = mainEl.clientHeight || 0;\n    const width = mainEl.clientWidth || 0;\n    const win = ownerWindow(mainEl);\n    const computedStyle = win.getComputedStyle(mainEl);\n    const paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n    const paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n    const paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n    const paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n    const newHeight = height - paddingTop - paddingBottom;\n    const newWidth = width - paddingLeft - paddingRight;\n    const hasHeightChanged = newHeight !== ((_previousSize$current = previousSize.current) == null ? void 0 : _previousSize$current.height);\n    const hasWidthChanged = newWidth !== ((_previousSize$current2 = previousSize.current) == null ? void 0 : _previousSize$current2.width);\n    if (!previousSize.current || hasHeightChanged || hasWidthChanged) {\n      const size = {\n        width: newWidth,\n        height: newHeight\n      };\n      apiRef.current.publishEvent('resize', size);\n      previousSize.current = size;\n    }\n  }, [apiRef]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions\n  };\n  const dimensionsPrivateApi = {\n    getViewportPageSize,\n    updateGridDimensionsRef,\n    computeSizeAndPublishResizeEvent\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'public');\n  useGridApiMethod(apiRef, dimensionsPrivateApi, 'private');\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n\n    // jsdom has no layout capabilities\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}