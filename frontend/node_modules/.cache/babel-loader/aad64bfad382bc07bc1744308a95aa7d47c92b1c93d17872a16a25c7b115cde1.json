{"ast":null,"code":"import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\nfunction sanitizeCellValue(value, delimiterCharacter) {\n  if (typeof value === 'string') {\n    var formattedValue = value.replace(/\"/g, '\"\"');\n\n    // Make sure value containing delimiter or line break won't be split into multiple rows\n    if ([delimiterCharacter, '\\n', '\\r'].some(function (delimiter) {\n      return formattedValue.includes(delimiter);\n    })) {\n      return \"\\\"\".concat(formattedValue, \"\\\"\");\n    }\n    return formattedValue;\n  }\n  return value;\n}\nexport var serializeCellValue = function serializeCellValue(cellParams, options) {\n  var delimiterCharacter = options.delimiterCharacter,\n    ignoreValueFormatter = options.ignoreValueFormatter;\n  var value;\n  if (ignoreValueFormatter) {\n    var _cellParams$value2;\n    var columnType = cellParams.colDef.type;\n    if (columnType === 'number') {\n      value = String(cellParams.value);\n    } else if (columnType === 'date' || columnType === 'dateTime') {\n      var _cellParams$value;\n      value = (_cellParams$value = cellParams.value) == null ? void 0 : _cellParams$value.toISOString();\n    } else if (typeof ((_cellParams$value2 = cellParams.value) == null ? void 0 : _cellParams$value2.toString) === 'function') {\n      value = cellParams.value.toString();\n    } else {\n      value = cellParams.value;\n    }\n  } else {\n    value = cellParams.formattedValue;\n  }\n  return sanitizeCellValue(value, delimiterCharacter);\n};\nvar objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nvar serializeRow = function serializeRow(_ref) {\n  var id = _ref.id,\n    columns = _ref.columns,\n    getCellParams = _ref.getCellParams,\n    delimiterCharacter = _ref.delimiterCharacter,\n    ignoreValueFormatter = _ref.ignoreValueFormatter;\n  return columns.map(function (column) {\n    var cellParams = getCellParams(id, column.field);\n    if (process.env.NODE_ENV !== 'production') {\n      if (String(cellParams.formattedValue) === '[object Object]') {\n        objectFormattedValueWarning();\n      }\n    }\n    return serializeCellValue(cellParams, {\n      delimiterCharacter: delimiterCharacter,\n      ignoreValueFormatter: ignoreValueFormatter\n    });\n  });\n};\nexport function buildCSV(options) {\n  var columns = options.columns,\n    rowIds = options.rowIds,\n    getCellParams = options.getCellParams,\n    delimiterCharacter = options.delimiterCharacter,\n    includeHeaders = options.includeHeaders,\n    ignoreValueFormatter = options.ignoreValueFormatter;\n  var CSVBody = rowIds.reduce(function (acc, id) {\n    return \"\".concat(acc).concat(serializeRow({\n      id: id,\n      columns: columns,\n      getCellParams: getCellParams,\n      delimiterCharacter: delimiterCharacter,\n      ignoreValueFormatter: ignoreValueFormatter\n    }).join(delimiterCharacter), \"\\r\\n\");\n  }, '').trim();\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n  var CSVHead = \"\".concat(columns.filter(function (column) {\n    return column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field;\n  }).map(function (column) {\n    return sanitizeCellValue(column.headerName || column.field, delimiterCharacter);\n  }).join(delimiterCharacter), \"\\r\\n\");\n  return \"\".concat(CSVHead).concat(CSVBody).trim();\n}","map":{"version":3,"names":["GRID_CHECKBOX_SELECTION_COL_DEF","buildWarning","sanitizeCellValue","value","delimiterCharacter","formattedValue","replace","some","delimiter","includes","concat","serializeCellValue","cellParams","options","ignoreValueFormatter","_cellParams$value2","columnType","colDef","type","String","_cellParams$value","toISOString","toString","objectFormattedValueWarning","serializeRow","_ref","id","columns","getCellParams","map","column","field","process","env","NODE_ENV","buildCSV","rowIds","includeHeaders","CSVBody","reduce","acc","join","trim","CSVHead","filter","headerName"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js"],"sourcesContent":["import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\nfunction sanitizeCellValue(value, delimiterCharacter) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n\n    // Make sure value containing delimiter or line break won't be split into multiple rows\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n    return formattedValue;\n  }\n  return value;\n}\nexport const serializeCellValue = (cellParams, options) => {\n  const {\n    delimiterCharacter,\n    ignoreValueFormatter\n  } = options;\n  let value;\n  if (ignoreValueFormatter) {\n    var _cellParams$value2;\n    const columnType = cellParams.colDef.type;\n    if (columnType === 'number') {\n      value = String(cellParams.value);\n    } else if (columnType === 'date' || columnType === 'dateTime') {\n      var _cellParams$value;\n      value = (_cellParams$value = cellParams.value) == null ? void 0 : _cellParams$value.toISOString();\n    } else if (typeof ((_cellParams$value2 = cellParams.value) == null ? void 0 : _cellParams$value2.toString) === 'function') {\n      value = cellParams.value.toString();\n    } else {\n      value = cellParams.value;\n    }\n  } else {\n    value = cellParams.formattedValue;\n  }\n  return sanitizeCellValue(value, delimiterCharacter);\n};\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nconst serializeRow = ({\n  id,\n  columns,\n  getCellParams,\n  delimiterCharacter,\n  ignoreValueFormatter\n}) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n  return serializeCellValue(cellParams, {\n    delimiterCharacter,\n    ignoreValueFormatter\n  });\n});\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders,\n    ignoreValueFormatter\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({\n    id,\n    columns,\n    getCellParams,\n    delimiterCharacter,\n    ignoreValueFormatter\n  }).join(delimiterCharacter)}\\r\\n`, '').trim();\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => sanitizeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}