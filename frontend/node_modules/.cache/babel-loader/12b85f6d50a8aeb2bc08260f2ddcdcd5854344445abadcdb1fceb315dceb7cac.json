{"ast":null,"code":"import axios from 'axios';\nimport { ALL_PRODUCT_FAIL, ALL_PRODUCT_SUCCESS, ALL_PRODUCT_REQUEST, CLEAR_ERRORS, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, NEW_REVIEW_REQUEST, NEW_REVIEW_SUCCESS, NEW_REVIEW_FAIL, ALL_REVIEW_REQUEST, ALL_REVIEW_SUCCESS, ALL_REVIEW_FAIL, DELETE_REVIEW_REQUEST, DELETE_REVIEW_SUCCESS, DELETE_REVIEW_FAIL } from \"../constants/productConstants\";\nexport const getProduct = function () {\n  let keyword = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let price = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 50000];\n  let category = arguments.length > 3 ? arguments[3] : undefined;\n  let ratings = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: ALL_PRODUCT_REQUEST\n      });\n      let link = `/api/v1/products?keyword=${keyword}&page=${currentPage}`;\n      if (category) {\n        link = `/api/v1/products?keyword=${keyword}&page=${currentPage}&price[gte]=${price[0]}&price[lte]=${price[1]}&category=${category}&ratings[gte]=${ratings}`;\n      }\n      const {\n        data\n      } = await axios.get(link);\n      dispatch({\n        type: ALL_PRODUCT_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: ALL_PRODUCT_FAIL,\n        payload: error.response.data.message\n      });\n    }\n  };\n};\nexport const getProductDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/product/${id}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data.product\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// NEW REVIEW\nexport const newReview = reviewData => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_REVIEW_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/review`, reviewData, config);\n    dispatch({\n      type: NEW_REVIEW_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_REVIEW_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// Get All Reviews of a Product\nexport const getAllReviews = id => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_REVIEW_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/reviews?id=${id}`);\n    dispatch({\n      type: ALL_REVIEW_SUCCESS,\n      payload: data.reviews\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_REVIEW_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// Delete Review of a Product\nexport const deleteReviews = (reviewId, productId) => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_REVIEW_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/reviews?id=${reviewId}&productId=${productId}`);\n    dispatch({\n      type: DELETE_REVIEW_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_REVIEW_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//to clear all errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axios","ALL_PRODUCT_FAIL","ALL_PRODUCT_SUCCESS","ALL_PRODUCT_REQUEST","CLEAR_ERRORS","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","NEW_REVIEW_REQUEST","NEW_REVIEW_SUCCESS","NEW_REVIEW_FAIL","ALL_REVIEW_REQUEST","ALL_REVIEW_SUCCESS","ALL_REVIEW_FAIL","DELETE_REVIEW_REQUEST","DELETE_REVIEW_SUCCESS","DELETE_REVIEW_FAIL","getProduct","keyword","arguments","length","undefined","currentPage","price","category","ratings","dispatch","type","link","data","get","payload","error","response","message","getProductDetails","id","product","newReview","reviewData","config","headers","put","success","getAllReviews","reviews","deleteReviews","reviewId","productId","delete","clearErrors"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/src/actions/productAction.js"],"sourcesContent":["import axios from 'axios';\r\nimport { ALL_PRODUCT_FAIL, ALL_PRODUCT_SUCCESS, ALL_PRODUCT_REQUEST, CLEAR_ERRORS, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, NEW_REVIEW_REQUEST, NEW_REVIEW_SUCCESS, NEW_REVIEW_FAIL, ALL_REVIEW_REQUEST, ALL_REVIEW_SUCCESS, ALL_REVIEW_FAIL, DELETE_REVIEW_REQUEST, DELETE_REVIEW_SUCCESS, DELETE_REVIEW_FAIL } from \"../constants/productConstants\";\r\n\r\n\r\nexport const getProduct = (keyword = \"\", currentPage = 1, price = [0, 50000], category, ratings = 0) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: ALL_PRODUCT_REQUEST });\r\n        let link = `/api/v1/products?keyword=${keyword}&page=${currentPage}`;\r\n        if (category) {\r\n            link = `/api/v1/products?keyword=${keyword}&page=${currentPage}&price[gte]=${price[0]}&price[lte]=${price[1]}&category=${category}&ratings[gte]=${ratings}`;\r\n\r\n        }\r\n        const { data } = await axios.get(link);\r\n        dispatch({\r\n            type: ALL_PRODUCT_SUCCESS,\r\n            payload: data,\r\n        });\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: ALL_PRODUCT_FAIL,\r\n            payload: error.response.data.message\r\n        });\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const getProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST });\r\n\r\n        const { data } = await axios.get(`/api/v1/product/${id}`);\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data.product,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response.data.message,\r\n        });\r\n    }\r\n};\r\n\r\n\r\n// NEW REVIEW\r\nexport const newReview = (reviewData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: NEW_REVIEW_REQUEST });\r\n\r\n        const config = {\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n        };\r\n\r\n        const { data } = await axios.put(`/api/v1/review`, reviewData, config);\r\n\r\n        dispatch({\r\n            type: NEW_REVIEW_SUCCESS,\r\n            payload: data.success,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: NEW_REVIEW_FAIL,\r\n            payload: error.response.data.message,\r\n        });\r\n    }\r\n};\r\n\r\n// Get All Reviews of a Product\r\nexport const getAllReviews = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: ALL_REVIEW_REQUEST });\r\n\r\n        const { data } = await axios.get(`/api/v1/reviews?id=${id}`);\r\n\r\n        dispatch({\r\n            type: ALL_REVIEW_SUCCESS,\r\n            payload: data.reviews,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ALL_REVIEW_FAIL,\r\n            payload: error.response.data.message,\r\n        });\r\n    }\r\n};\r\n\r\n// Delete Review of a Product\r\nexport const deleteReviews = (reviewId, productId) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: DELETE_REVIEW_REQUEST });\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/v1/reviews?id=${reviewId}&productId=${productId}`\r\n        );\r\n\r\n        dispatch({\r\n            type: DELETE_REVIEW_SUCCESS,\r\n            payload: data.success,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: DELETE_REVIEW_FAIL,\r\n            payload: error.response.data.message,\r\n        });\r\n    }\r\n};\r\n\r\n\r\n//to clear all errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({ type: CLEAR_ERRORS });\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}