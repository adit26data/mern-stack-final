{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport var COMPACT_DENSITY_FACTOR = 0.7;\nexport var COMFORTABLE_DENSITY_FACTOR = 1.3;\nvar DENSITY_FACTORS = {\n  compact: COMPACT_DENSITY_FACTOR,\n  comfortable: COMFORTABLE_DENSITY_FACTOR,\n  standard: 1\n};\nexport var densityStateInitializer = function densityStateInitializer(state, props) {\n  return _extends({}, state, {\n    density: {\n      value: props.density,\n      factor: DENSITY_FACTORS[props.density]\n    }\n  });\n};\nexport var useGridDensity = function useGridDensity(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useDensity');\n  var setDensity = React.useCallback(function (newDensity) {\n    logger.debug(\"Set grid density to \".concat(newDensity));\n    apiRef.current.setState(function (state) {\n      var currentDensityState = gridDensitySelector(state);\n      var newDensityState = {\n        value: newDensity,\n        factor: DENSITY_FACTORS[newDensity]\n      };\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n  React.useEffect(function () {\n    apiRef.current.setDensity(props.density);\n  }, [apiRef, props.density]);\n  var densityApi = {\n    setDensity: setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n};","map":{"version":3,"names":["_extends","React","useGridLogger","useGridApiMethod","gridDensitySelector","isDeepEqual","COMPACT_DENSITY_FACTOR","COMFORTABLE_DENSITY_FACTOR","DENSITY_FACTORS","compact","comfortable","standard","densityStateInitializer","state","props","density","value","factor","useGridDensity","apiRef","logger","setDensity","useCallback","newDensity","debug","concat","current","setState","currentDensityState","newDensityState","forceUpdate","useEffect","densityApi"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport const COMPACT_DENSITY_FACTOR = 0.7;\nexport const COMFORTABLE_DENSITY_FACTOR = 1.3;\nconst DENSITY_FACTORS = {\n  compact: COMPACT_DENSITY_FACTOR,\n  comfortable: COMFORTABLE_DENSITY_FACTOR,\n  standard: 1\n};\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: {\n    value: props.density,\n    factor: DENSITY_FACTORS[props.density]\n  }\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  const setDensity = React.useCallback(newDensity => {\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => {\n      const currentDensityState = gridDensitySelector(state);\n      const newDensityState = {\n        value: newDensity,\n        factor: DENSITY_FACTORS[newDensity]\n      };\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n  React.useEffect(() => {\n    apiRef.current.setDensity(props.density);\n  }, [apiRef, props.density]);\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,mBAAmB,QAAQ,mBAAmB;AACvD,SAASC,WAAW,QAAQ,sBAAsB;AAClD,OAAO,IAAMC,sBAAsB,GAAG,GAAG;AACzC,OAAO,IAAMC,0BAA0B,GAAG,GAAG;AAC7C,IAAMC,eAAe,GAAG;EACtBC,OAAO,EAAEH,sBAAsB;EAC/BI,WAAW,EAAEH,0BAA0B;EACvCI,QAAQ,EAAE;AACZ,CAAC;AACD,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIC,KAAK,EAAEC,KAAK;EAAA,OAAKd,QAAQ,CAAC,CAAC,CAAC,EAAEa,KAAK,EAAE;IAC3EE,OAAO,EAAE;MACPC,KAAK,EAAEF,KAAK,CAACC,OAAO;MACpBE,MAAM,EAAET,eAAe,CAACM,KAAK,CAACC,OAAO;IACvC;EACF,CAAC,CAAC;AAAA;AACF,OAAO,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,MAAM,EAAEL,KAAK,EAAK;EAC/C,IAAMM,MAAM,GAAGlB,aAAa,CAACiB,MAAM,EAAE,YAAY,CAAC;EAClD,IAAME,UAAU,GAAGpB,KAAK,CAACqB,WAAW,CAAC,UAAAC,UAAU,EAAI;IACjDH,MAAM,CAACI,KAAK,wBAAAC,MAAA,CAAwBF,UAAU,CAAE,CAAC;IACjDJ,MAAM,CAACO,OAAO,CAACC,QAAQ,CAAC,UAAAd,KAAK,EAAI;MAC/B,IAAMe,mBAAmB,GAAGxB,mBAAmB,CAACS,KAAK,CAAC;MACtD,IAAMgB,eAAe,GAAG;QACtBb,KAAK,EAAEO,UAAU;QACjBN,MAAM,EAAET,eAAe,CAACe,UAAU;MACpC,CAAC;MACD,IAAIlB,WAAW,CAACuB,mBAAmB,EAAEC,eAAe,CAAC,EAAE;QACrD,OAAOhB,KAAK;MACd;MACA,OAAOb,QAAQ,CAAC,CAAC,CAAC,EAAEa,KAAK,EAAE;QACzBE,OAAO,EAAEc;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;IACFV,MAAM,CAACO,OAAO,CAACI,WAAW,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACV,MAAM,EAAED,MAAM,CAAC,CAAC;EACpBlB,KAAK,CAAC8B,SAAS,CAAC,YAAM;IACpBZ,MAAM,CAACO,OAAO,CAACL,UAAU,CAACP,KAAK,CAACC,OAAO,CAAC;EAC1C,CAAC,EAAE,CAACI,MAAM,EAAEL,KAAK,CAACC,OAAO,CAAC,CAAC;EAC3B,IAAMiB,UAAU,GAAG;IACjBX,UAAU,EAAVA;EACF,CAAC;EACDlB,gBAAgB,CAACgB,MAAM,EAAEa,UAAU,EAAE,QAAQ,CAAC;AAChD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}