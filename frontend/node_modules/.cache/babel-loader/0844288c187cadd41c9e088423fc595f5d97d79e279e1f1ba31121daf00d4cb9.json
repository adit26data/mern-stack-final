{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      filteredDescendantCountLookup: {}\n    },\n    visibleRowsLookup: {}\n  });\n};\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      const newState = _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return _extends({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n      return {\n        filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n\n  // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","useFirstRender","GRID_ROOT_GROUP_ID","gridRowTreeSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","filteredDescendantCountLookup","visibleRowsLookup","getVisibleRowsLookup","params","filteredRowsLookup","getVisibleRowsLookupState","current","applyStrategyProcessor","tree","rows","useGridFilter","_props$initialState3","_props$initialState3$","_props$slotProps2","logger","registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","filteringResult","newState","visibleRowsLookupState","publishEvent","addColumnMenuItem","columnMenuItems","colDef","filterable","disableColumnFilter","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","panelId","labelId","debug","filterItemsWithValue","_column$filterOperato","value","undefined","Array","isArray","column","getColumn","field","filterOperator","filterOperators","find","operator","requiresFilterValue","newFilterItems","filterItemOnTarget","targetColumn","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLogicOperator","logicOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","updateControlState","unstable_applyFilters","filterApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$slotProps","FilterPanel","slots","filterPanel","slotProps","flatFilteringMethod","rowIds","children","i","rowId","isRowPassing","startsWith","passingFilterItems","passingQuickFilterValues","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","updateVisibleRowsLookupState"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      filteredDescendantCountLookup: {}\n    },\n    visibleRowsLookup: {}\n  });\n};\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      const newState = _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return _extends({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n      return {\n        filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n\n  // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}