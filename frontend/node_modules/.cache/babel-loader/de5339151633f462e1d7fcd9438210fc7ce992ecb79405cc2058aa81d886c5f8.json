{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\n\n// Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\nfunction scrollIntoView(dimensions) {\n  var clientHeight = dimensions.clientHeight,\n    scrollTop = dimensions.scrollTop,\n    offsetHeight = dimensions.offsetHeight,\n    offsetTop = dimensions.offsetTop;\n  var elementBottom = offsetTop + offsetHeight;\n  // Always scroll to top when cell is higher than viewport to avoid scroll jump\n  // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514\n  if (offsetHeight > clientHeight) {\n    return offsetTop;\n  }\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n  return undefined;\n}\n\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n * @requires useGridFilter (state)\n * @requires useGridColumnSpanning (method)\n */\nexport var useGridScroll = function useGridScroll(apiRef, props) {\n  var theme = useTheme();\n  var logger = useGridLogger(apiRef, 'useGridScroll');\n  var colRef = apiRef.current.columnHeadersElementRef;\n  var virtualScrollerRef = apiRef.current.virtualScrollerRef;\n  var visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);\n  var scrollToIndexes = React.useCallback(function (params) {\n    var totalRowCount = gridRowCountSelector(apiRef);\n    var visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    var scrollToHeader = params.rowIndex == null;\n    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n    logger.debug(\"Scrolling to cell at row \".concat(params.rowIndex, \", col: \").concat(params.colIndex, \" \"));\n    var scrollCoordinates = {};\n    if (params.colIndex != null) {\n      var columnPositions = gridColumnPositionsSelector(apiRef);\n      var cellWidth;\n      if (typeof params.rowIndex !== 'undefined') {\n        var _visibleSortedRows$pa;\n        var rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;\n        var cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);\n        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n          cellWidth = cellColSpanInfo.cellProps.width;\n        }\n      }\n      if (typeof cellWidth === 'undefined') {\n        cellWidth = visibleColumns[params.colIndex].computedWidth;\n      }\n      // When using RTL, `scrollLeft` becomes negative, so we must ensure that we only compare values.\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientWidth,\n        scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),\n        offsetHeight: cellWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n    if (params.rowIndex != null) {\n      var _querySelector, _querySelector2;\n      var rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      var page = gridPageSelector(apiRef);\n      var pageSize = gridPageSizeSelector(apiRef);\n      var elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      var targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      var topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(\".\".concat(gridClasses['pinnedRows--top']))) == null ? void 0 : _querySelector.clientHeight) || 0;\n      var bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(\".\".concat(gridClasses['pinnedRows--bottom']))) == null ? void 0 : _querySelector2.clientHeight) || 0;\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,\n        scrollTop: virtualScrollerRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n    return false;\n  }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);\n  var scroll = React.useCallback(function (params) {\n    if (virtualScrollerRef.current && params.left != null && colRef.current) {\n      var direction = theme.direction === 'rtl' ? -1 : 1;\n      colRef.current.scrollLeft = params.left;\n      virtualScrollerRef.current.scrollLeft = direction * params.left;\n      logger.debug(\"Scrolling left: \".concat(params.left));\n    }\n    if (virtualScrollerRef.current && params.top != null) {\n      virtualScrollerRef.current.scrollTop = params.top;\n      logger.debug(\"Scrolling top: \".concat(params.top));\n    }\n    logger.debug(\"Scrolling, updating container, and viewport\");\n  }, [virtualScrollerRef, theme.direction, colRef, logger]);\n  var getScrollPosition = React.useCallback(function () {\n    if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n    return {\n      top: virtualScrollerRef.current.scrollTop,\n      left: virtualScrollerRef.current.scrollLeft\n    };\n  }, [virtualScrollerRef]);\n  var scrollApi = {\n    scroll: scroll,\n    scrollToIndexes: scrollToIndexes,\n    getScrollPosition: getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'public');\n};","map":{"version":3,"names":["React","useTheme","useGridLogger","gridColumnPositionsSelector","gridVisibleColumnDefinitionsSelector","useGridSelector","gridPageSelector","gridPageSizeSelector","gridRowCountSelector","gridRowsMetaSelector","useGridApiMethod","gridExpandedSortedRowEntriesSelector","gridClasses","scrollIntoView","dimensions","clientHeight","scrollTop","offsetHeight","offsetTop","elementBottom","undefined","useGridScroll","apiRef","props","theme","logger","colRef","current","columnHeadersElementRef","virtualScrollerRef","visibleSortedRows","scrollToIndexes","useCallback","params","totalRowCount","visibleColumns","scrollToHeader","rowIndex","length","debug","concat","colIndex","scrollCoordinates","columnPositions","cellWidth","_visibleSortedRows$pa","rowId","id","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","width","computedWidth","left","clientWidth","Math","abs","scrollLeft","_querySelector","_querySelector2","rowsMeta","state","page","pageSize","elementIndex","pagination","targetOffsetHeight","positions","currentPageTotalHeight","topPinnedRowsHeight","querySelector","bottomPinnedRowsHeight","top","unstable_applyPipeProcessors","scroll","direction","getScrollPosition","scrollApi"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\n\n// Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\nfunction scrollIntoView(dimensions) {\n  const {\n    clientHeight,\n    scrollTop,\n    offsetHeight,\n    offsetTop\n  } = dimensions;\n  const elementBottom = offsetTop + offsetHeight;\n  // Always scroll to top when cell is higher than viewport to avoid scroll jump\n  // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514\n  if (offsetHeight > clientHeight) {\n    return offsetTop;\n  }\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n  return undefined;\n}\n\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n * @requires useGridFilter (state)\n * @requires useGridColumnSpanning (method)\n */\nexport const useGridScroll = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridScroll');\n  const colRef = apiRef.current.columnHeadersElementRef;\n  const virtualScrollerRef = apiRef.current.virtualScrollerRef;\n  const visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);\n  const scrollToIndexes = React.useCallback(params => {\n    const totalRowCount = gridRowCountSelector(apiRef);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const scrollToHeader = params.rowIndex == null;\n    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);\n    let scrollCoordinates = {};\n    if (params.colIndex != null) {\n      const columnPositions = gridColumnPositionsSelector(apiRef);\n      let cellWidth;\n      if (typeof params.rowIndex !== 'undefined') {\n        var _visibleSortedRows$pa;\n        const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;\n        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);\n        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n          cellWidth = cellColSpanInfo.cellProps.width;\n        }\n      }\n      if (typeof cellWidth === 'undefined') {\n        cellWidth = visibleColumns[params.colIndex].computedWidth;\n      }\n      // When using RTL, `scrollLeft` becomes negative, so we must ensure that we only compare values.\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientWidth,\n        scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),\n        offsetHeight: cellWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n    if (params.rowIndex != null) {\n      var _querySelector, _querySelector2;\n      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      const page = gridPageSelector(apiRef);\n      const pageSize = gridPageSizeSelector(apiRef);\n      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      const topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--top']}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n      const bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--bottom']}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,\n        scrollTop: virtualScrollerRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n    return false;\n  }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);\n  const scroll = React.useCallback(params => {\n    if (virtualScrollerRef.current && params.left != null && colRef.current) {\n      const direction = theme.direction === 'rtl' ? -1 : 1;\n      colRef.current.scrollLeft = params.left;\n      virtualScrollerRef.current.scrollLeft = direction * params.left;\n      logger.debug(`Scrolling left: ${params.left}`);\n    }\n    if (virtualScrollerRef.current && params.top != null) {\n      virtualScrollerRef.current.scrollTop = params.top;\n      logger.debug(`Scrolling top: ${params.top}`);\n    }\n    logger.debug(`Scrolling, updating container, and viewport`);\n  }, [virtualScrollerRef, theme.direction, colRef, logger]);\n  const getScrollPosition = React.useCallback(() => {\n    if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n    return {\n      top: virtualScrollerRef.current.scrollTop,\n      left: virtualScrollerRef.current.scrollLeft\n    };\n  }, [virtualScrollerRef]);\n  const scrollApi = {\n    scroll,\n    scrollToIndexes,\n    getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'public');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}