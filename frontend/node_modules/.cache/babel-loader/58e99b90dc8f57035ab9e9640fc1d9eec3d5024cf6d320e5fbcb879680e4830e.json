{"ast":null,"code":"import _slicedToArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutoGeneratedRow, GRID_ROOT_GROUP_ID, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport var rowsStateInitializer = function rowsStateInitializer(state, props, apiRef) {\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef: apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport var useGridRows = function useGridRows(apiRef, props) {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  var logger = useGridLogger(apiRef, 'useGridRows');\n  var currentPage = useGridVisibleRows(apiRef, props);\n  var lastUpdateMs = React.useRef(Date.now());\n  var timeout = React.useRef(null);\n  var getRow = React.useCallback(function (id) {\n    var model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    var node = apiRef.current.getRowNode(id);\n    if (node && isAutoGeneratedRow(node)) {\n      // TODO rows v6: Is it the best approach ?\n      return {};\n    }\n    return null;\n  }, [apiRef]);\n  var lookup = React.useMemo(function () {\n    return currentPage.rows.reduce(function (acc, _ref2, index) {\n      var id = _ref2.id;\n      acc[id] = index;\n      return acc;\n    }, {});\n  }, [currentPage.rows]);\n  var throttledRowsChange = React.useCallback(function (_ref3) {\n    var cache = _ref3.cache,\n      throttle = _ref3.throttle;\n    var run = function run() {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          rows: getRowsStateFromCache({\n            apiRef: apiRef,\n            rowCountProp: props.rowCount,\n            loadingProp: props.loading,\n            previousTree: gridRowTreeSelector(apiRef),\n            previousTreeDepths: gridRowTreeDepthsSelector(apiRef)\n          })\n        });\n      });\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    var throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  var setRows = React.useCallback(function (rows) {\n    logger.debug(\"Updating all rows, new length \".concat(rows.length));\n    var cache = createRowsInternalCache({\n      rows: rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    var prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache: cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  var updateRows = React.useCallback(function (updates) {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    var nonPinnedRowsUpdates = [];\n    updates.forEach(function (update) {\n      var id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n      var rowNode = apiRef.current.getRowNode(id);\n      if ((rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n        // @ts-ignore because otherwise `release:build` doesn't work\n        var pinnedRowsCache = apiRef.current.caches.pinnedRows;\n        var prevModel = pinnedRowsCache.idLookup[id];\n        if (prevModel) {\n          pinnedRowsCache.idLookup[id] = _extends({}, prevModel, update);\n        }\n      } else {\n        nonPinnedRowsUpdates.push(update);\n      }\n    });\n    var cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache: cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  var getRowModels = React.useCallback(function () {\n    var dataRows = gridDataRowIdsSelector(apiRef);\n    var idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(function (id) {\n      var _idRowsLookup$id;\n      return [id, (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}];\n    }));\n  }, [apiRef]);\n  var getRowsCount = React.useCallback(function () {\n    return gridRowCountSelector(apiRef);\n  }, [apiRef]);\n  var getAllRowIds = React.useCallback(function () {\n    return gridDataRowIdsSelector(apiRef);\n  }, [apiRef]);\n  var getRowIndexRelativeToVisibleRows = React.useCallback(function (id) {\n    return lookup[id];\n  }, [lookup]);\n  var setRowChildrenExpansion = React.useCallback(function (id, isExpanded) {\n    var currentNode = apiRef.current.getRowNode(id);\n    if (!currentNode) {\n      throw new Error(\"MUI: No row with id #\".concat(id, \" found\"));\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI: Only group nodes can be expanded or collapsed');\n    }\n    var newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, _defineProperty({}, id, newNode))\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  var getRowNode = React.useCallback(function (id) {\n    var _ref;\n    return (_ref = gridRowTreeSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  var getRowGroupChildren = React.useCallback(function (_ref4) {\n    var _ref4$skipAutoGenerat = _ref4.skipAutoGeneratedRows,\n      skipAutoGeneratedRows = _ref4$skipAutoGenerat === void 0 ? true : _ref4$skipAutoGenerat,\n      groupId = _ref4.groupId,\n      applySorting = _ref4.applySorting,\n      applyFiltering = _ref4.applyFiltering;\n    var tree = gridRowTreeSelector(apiRef);\n    var children;\n    if (applySorting) {\n      var groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      var sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      var startIndex = sortedRowIds.findIndex(function (id) {\n        return id === groupId;\n      }) + 1;\n      for (var index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        var id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      var filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(function (childId) {\n        return filteredRowsLookup[childId] !== false;\n      });\n    }\n    return children;\n  }, [apiRef]);\n  var setRowIndex = React.useCallback(function (rowId, targetIndex) {\n    var node = apiRef.current.getRowNode(rowId);\n    if (!node) {\n      throw new Error(\"MUI: No row with id #\".concat(rowId, \" found\"));\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(\"MUI: The row reordering do not support reordering of grouped rows yet\");\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(\"MUI: The row reordering do not support reordering of footer or grouping rows\");\n    }\n    apiRef.current.setState(function (state) {\n      var group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      var allRows = group.children;\n      var oldIndex = allRows.findIndex(function (row) {\n        return row === rowId;\n      });\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(\"Moving row \".concat(rowId, \" to index \").concat(targetIndex));\n      var updatedRows = _toConsumableArray(allRows);\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, _defineProperty({}, GRID_ROOT_GROUP_ID, _extends({}, group, {\n            children: updatedRows\n          })))\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  var replaceRows = React.useCallback(function (firstRowToRender, newRows) {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error([\"MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    var treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    var tree = _extends({}, gridRowTreeSelector(apiRef));\n    var dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    var dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n    var rootGroup = tree[GRID_ROOT_GROUP_ID];\n    var rootGroupChildren = _toConsumableArray(rootGroup.children);\n    for (var i = 0; i < newRows.length; i += 1) {\n      var rowModel = newRows[i];\n      var rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      var _rootGroupChildren$sp = rootGroupChildren.splice(firstRowToRender + i, 1, rowId),\n        _rootGroupChildren$sp2 = _slicedToArray(_rootGroupChildren$sp, 1),\n        replacedRowId = _rootGroupChildren$sp2[0];\n      delete dataRowIdToModelLookup[replacedRowId];\n      delete dataRowIdToIdLookup[replacedRowId];\n      delete tree[replacedRowId];\n      var rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    var dataRowIds = rootGroupChildren.filter(function (childId) {\n      return tree[childId].type === 'leaf';\n    });\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          dataRowIdToModelLookup: dataRowIdToModelLookup,\n          dataRowIdToIdLookup: dataRowIdToIdLookup,\n          dataRowIds: dataRowIds,\n          tree: tree\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  var rowApi = {\n    getRow: getRow,\n    getRowModels: getRowModels,\n    getRowsCount: getRowsCount,\n    getAllRowIds: getAllRowIds,\n    setRows: setRows,\n    updateRows: updateRows,\n    getRowNode: getRowNode,\n    getRowIndexRelativeToVisibleRows: getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  var rowProApi = {\n    setRowIndex: setRowIndex,\n    setRowChildrenExpansion: setRowChildrenExpansion,\n    getRowGroupChildren: getRowGroupChildren\n  };\n\n  /**\n   * EVENTS\n   */\n  var groupRows = React.useCallback(function () {\n    logger.info(\"Row grouping pre-processing have changed, regenerating the row tree\");\n    var cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache: cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  var handleStrategyProcessorChange = React.useCallback(function (methodName) {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  var handleStrategyActivityChange = React.useCallback(function () {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  var applyHydrateRowsProcessor = React.useCallback(function () {\n    apiRef.current.setState(function (state) {\n      var response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(function () {\n    return function () {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []);\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    var areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    var isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    var isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(function (state) {\n          return _extends({}, state, {\n            rows: _extends({}, state.rows, {\n              loading: props.loading\n            })\n          });\n        });\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(function (state) {\n          return _extends({}, state, {\n            rows: _extends({}, state.rows, {\n              totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n              totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n            })\n          });\n        });\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n      return;\n    }\n    logger.debug(\"Updating all rows, new length \".concat(props.rows.length));\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowGroupingNameSelector","gridRowTreeDepthsSelector","gridDataRowIdsSelector","gridRowsDataRowIdToIdLookupSelector","gridRowMaximumTreeDepthSelector","GridSignature","useGridApiEventHandler","useGridVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","isAutoGeneratedRow","GRID_ROOT_GROUP_ID","updateCacheWithNewRows","getTopLevelRowCount","getRowIdFromRowModel","useGridRegisterPipeApplier","rowsStateInitializer","state","props","apiRef","current","caches","rows","getRowId","loading","rowCount","rowCountProp","loadingProp","previousTree","previousTreeDepths","useGridRows","process","env","NODE_ENV","Object","freeze","error","logger","currentPage","lastUpdateMs","useRef","Date","now","timeout","getRow","useCallback","id","model","node","getRowNode","lookup","useMemo","reduce","acc","_ref2","index","throttledRowsChange","_ref3","cache","throttle","run","setState","publishEvent","forceUpdate","clearTimeout","throttleRemainingTimeMs","throttleRowsMs","setTimeout","setRows","debug","concat","length","prevCache","rowsBeforePartialUpdates","updateRows","updates","signature","DataGrid","Error","join","nonPinnedRowsUpdates","forEach","update","rowNode","type","pinnedRowsCache","pinnedRows","prevModel","idLookup","push","previousCache","getRowModels","dataRows","idRowsLookup","Map","map","_idRowsLookup$id","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","setRowChildrenExpansion","isExpanded","currentNode","newNode","childrenExpanded","tree","_defineProperty","_ref","getRowGroupChildren","_ref4","_ref4$skipAutoGenerat","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","startIndex","findIndex","depth","filteredRowsLookup","filter","childId","setRowIndex","rowId","targetIndex","parent","group","instanceId","allRows","oldIndex","row","updatedRows","_toConsumableArray","splice","replaceRows","firstRowToRender","newRows","treeDepth","dataRowIdToModelLookup","dataRowIdToIdLookup","rootGroup","rootGroupChildren","i","rowModel","_rootGroupChildren$sp","_rootGroupChildren$sp2","_slicedToArray","replacedRowId","rowTreeNodeConfig","groupingKey","dataRowIds","rowApi","unstable_replaceRows","rowProApi","groupRows","info","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","getActiveStrategy","applyHydrateRowsProcessor","response","unstable_applyPipeProcessors","treeDepths","totalTopLevelRowCount","useEffect","isFirstRender","areNewRowsAlreadyInState","isNewLoadingAlreadyInState","loadingPropBeforePartialUpdates","isNewRowCountAlreadyInState","rowCountPropBeforePartialUpdates","totalRowCount","Math","max"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutoGeneratedRow, GRID_ROOT_GROUP_ID, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const timeout = React.useRef(null);\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = apiRef.current.getRowNode(id);\n    if (node && isAutoGeneratedRow(node)) {\n      // TODO rows v6: Is it the best approach ?\n      return {};\n    }\n    return null;\n  }, [apiRef]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, {\n    id\n  }, index) => {\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback(({\n    cache,\n    throttle\n  }) => {\n    const run = () => {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    const nonPinnedRowsUpdates = [];\n    updates.forEach(update => {\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n      const rowNode = apiRef.current.getRowNode(id);\n      if ((rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n        // @ts-ignore because otherwise `release:build` doesn't work\n        const pinnedRowsCache = apiRef.current.caches.pinnedRows;\n        const prevModel = pinnedRowsCache.idLookup[id];\n        if (prevModel) {\n          pinnedRowsCache.idLookup[id] = _extends({}, prevModel, update);\n        }\n      } else {\n        nonPinnedRowsUpdates.push(update);\n      }\n    });\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => {\n      var _idRowsLookup$id;\n      return [id, (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}];\n    }));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n    if (!currentNode) {\n      throw new Error(`MUI: No row with id #${id} found`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI: Only group nodes can be expanded or collapsed');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _ref;\n    return (_ref = gridRowTreeSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = apiRef.current.getRowNode(rowId);\n    if (!node) {\n      throw new Error(`MUI: No row with id #${rowId} found`);\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI: The row reordering do not support reordering of grouped rows yet`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI: The row reordering do not support reordering of footer or grouping rows`);\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error([\"MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [replacedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      delete dataRowIdToModelLookup[replacedRowId];\n      delete dataRowIdToIdLookup[replacedRowId];\n      delete tree[replacedRowId];\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId].type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        dataRowIdToModelLookup,\n        dataRowIdToIdLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []);\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n      return;\n    }\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}