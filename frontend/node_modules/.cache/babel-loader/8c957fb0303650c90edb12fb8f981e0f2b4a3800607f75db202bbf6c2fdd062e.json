{"ast":null,"code":"import _defineProperty from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"stateId\"];\nimport * as React from 'react';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../utils';\nimport { isFunction } from '../../utils/utils';\nexport var useGridStateInitialization = function useGridStateInitialization(apiRef, props) {\n  var controlStateMapRef = React.useRef({});\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    rawForceUpdate = _React$useState2[1];\n  var registerControlState = React.useCallback(function (controlStateItem) {\n    var stateId = controlStateItem.stateId,\n      others = _objectWithoutPropertiesLoose(controlStateItem, _excluded);\n    controlStateMapRef.current[stateId] = _extends({}, others, {\n      stateId: stateId\n    });\n  }, []);\n  var setState = React.useCallback(function (state, reason) {\n    var newState;\n    if (isFunction(state)) {\n      newState = state(apiRef.current.state);\n    } else {\n      newState = state;\n    }\n    if (apiRef.current.state === newState) {\n      return false;\n    }\n    var ignoreSetState = false;\n\n    // Apply the control state constraints\n    var updatedControlStateIds = [];\n    Object.keys(controlStateMapRef.current).forEach(function (stateId) {\n      var controlState = controlStateMapRef.current[stateId];\n      var oldSubState = controlState.stateSelector(apiRef.current.state, apiRef.current.instanceId);\n      var newSubState = controlState.stateSelector(newState, apiRef.current.instanceId);\n      if (newSubState === oldSubState) {\n        return;\n      }\n      updatedControlStateIds.push({\n        stateId: controlState.stateId,\n        hasPropChanged: newSubState !== controlState.propModel\n      });\n\n      // The state is controlled, the prop should always win\n      if (controlState.propModel !== undefined && newSubState !== controlState.propModel) {\n        ignoreSetState = true;\n      }\n    });\n    if (updatedControlStateIds.length > 1) {\n      // Each hook modify its own state, and it should not leak\n      // Events are here to forward to other hooks and apply changes.\n      // You are trying to update several states in a no isolated way.\n      throw new Error(\"You're not allowed to update several sub-state in one transaction. You already updated \".concat(updatedControlStateIds[0].stateId, \", therefore, you're not allowed to update \").concat(updatedControlStateIds.map(function (el) {\n        return el.stateId;\n      }).join(', '), \" in the same transaction.\"));\n    }\n    if (!ignoreSetState) {\n      // We always assign it as we mutate rows for perf reason.\n      apiRef.current.state = newState;\n      if (apiRef.current.publishEvent) {\n        apiRef.current.publishEvent('stateChange', newState);\n      }\n    }\n    if (updatedControlStateIds.length === 1) {\n      var _updatedControlStateI = updatedControlStateIds[0],\n        stateId = _updatedControlStateI.stateId,\n        hasPropChanged = _updatedControlStateI.hasPropChanged;\n      var controlState = controlStateMapRef.current[stateId];\n      var model = controlState.stateSelector(newState, apiRef.current.instanceId);\n      if (controlState.propOnChange && hasPropChanged) {\n        var details = props.signature === GridSignature.DataGridPro ? {\n          api: apiRef.current,\n          reason: reason\n        } : {\n          reason: reason\n        };\n        controlState.propOnChange(model, details);\n      }\n      if (!ignoreSetState) {\n        apiRef.current.publishEvent(controlState.changeEvent, model, {\n          reason: reason\n        });\n      }\n    }\n    return !ignoreSetState;\n  }, [apiRef, props.signature]);\n  var updateControlState = React.useCallback(function (key, state, reason) {\n    return apiRef.current.setState(function (previousState) {\n      return _extends({}, previousState, _defineProperty({}, key, state(previousState[key])));\n    }, reason);\n  }, [apiRef]);\n  var forceUpdate = React.useCallback(function () {\n    return rawForceUpdate(function () {\n      return apiRef.current.state;\n    });\n  }, [apiRef]);\n  var publicStateApi = {\n    setState: setState,\n    forceUpdate: forceUpdate\n  };\n  var privateStateApi = {\n    updateControlState: updateControlState,\n    registerControlState: registerControlState\n  };\n  useGridApiMethod(apiRef, publicStateApi, 'public');\n  useGridApiMethod(apiRef, privateStateApi, 'private');\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","GridSignature","useGridApiMethod","isFunction","useGridStateInitialization","apiRef","props","controlStateMapRef","useRef","_React$useState","useState","_React$useState2","_slicedToArray","rawForceUpdate","registerControlState","useCallback","controlStateItem","stateId","others","current","setState","state","reason","newState","ignoreSetState","updatedControlStateIds","Object","keys","forEach","controlState","oldSubState","stateSelector","instanceId","newSubState","push","hasPropChanged","propModel","undefined","length","Error","concat","map","el","join","publishEvent","_updatedControlStateI","model","propOnChange","details","signature","DataGridPro","api","changeEvent","updateControlState","key","previousState","_defineProperty","forceUpdate","publicStateApi","privateStateApi"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"stateId\"];\nimport * as React from 'react';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../utils';\nimport { isFunction } from '../../utils/utils';\nexport const useGridStateInitialization = (apiRef, props) => {\n  const controlStateMapRef = React.useRef({});\n  const [, rawForceUpdate] = React.useState();\n  const registerControlState = React.useCallback(controlStateItem => {\n    const {\n        stateId\n      } = controlStateItem,\n      others = _objectWithoutPropertiesLoose(controlStateItem, _excluded);\n    controlStateMapRef.current[stateId] = _extends({}, others, {\n      stateId\n    });\n  }, []);\n  const setState = React.useCallback((state, reason) => {\n    let newState;\n    if (isFunction(state)) {\n      newState = state(apiRef.current.state);\n    } else {\n      newState = state;\n    }\n    if (apiRef.current.state === newState) {\n      return false;\n    }\n    let ignoreSetState = false;\n\n    // Apply the control state constraints\n    const updatedControlStateIds = [];\n    Object.keys(controlStateMapRef.current).forEach(stateId => {\n      const controlState = controlStateMapRef.current[stateId];\n      const oldSubState = controlState.stateSelector(apiRef.current.state, apiRef.current.instanceId);\n      const newSubState = controlState.stateSelector(newState, apiRef.current.instanceId);\n      if (newSubState === oldSubState) {\n        return;\n      }\n      updatedControlStateIds.push({\n        stateId: controlState.stateId,\n        hasPropChanged: newSubState !== controlState.propModel\n      });\n\n      // The state is controlled, the prop should always win\n      if (controlState.propModel !== undefined && newSubState !== controlState.propModel) {\n        ignoreSetState = true;\n      }\n    });\n    if (updatedControlStateIds.length > 1) {\n      // Each hook modify its own state, and it should not leak\n      // Events are here to forward to other hooks and apply changes.\n      // You are trying to update several states in a no isolated way.\n      throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map(el => el.stateId).join(', ')} in the same transaction.`);\n    }\n    if (!ignoreSetState) {\n      // We always assign it as we mutate rows for perf reason.\n      apiRef.current.state = newState;\n      if (apiRef.current.publishEvent) {\n        apiRef.current.publishEvent('stateChange', newState);\n      }\n    }\n    if (updatedControlStateIds.length === 1) {\n      const {\n        stateId,\n        hasPropChanged\n      } = updatedControlStateIds[0];\n      const controlState = controlStateMapRef.current[stateId];\n      const model = controlState.stateSelector(newState, apiRef.current.instanceId);\n      if (controlState.propOnChange && hasPropChanged) {\n        const details = props.signature === GridSignature.DataGridPro ? {\n          api: apiRef.current,\n          reason\n        } : {\n          reason\n        };\n        controlState.propOnChange(model, details);\n      }\n      if (!ignoreSetState) {\n        apiRef.current.publishEvent(controlState.changeEvent, model, {\n          reason\n        });\n      }\n    }\n    return !ignoreSetState;\n  }, [apiRef, props.signature]);\n  const updateControlState = React.useCallback((key, state, reason) => {\n    return apiRef.current.setState(previousState => {\n      return _extends({}, previousState, {\n        [key]: state(previousState[key])\n      });\n    }, reason);\n  }, [apiRef]);\n  const forceUpdate = React.useCallback(() => rawForceUpdate(() => apiRef.current.state), [apiRef]);\n  const publicStateApi = {\n    setState,\n    forceUpdate\n  };\n  const privateStateApi = {\n    updateControlState,\n    registerControlState\n  };\n  useGridApiMethod(apiRef, publicStateApi, 'public');\n  useGridApiMethod(apiRef, privateStateApi, 'private');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}