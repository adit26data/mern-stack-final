{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport * as React from 'react';\nimport { localStorageAvailable } from '../../utils/utils';\nimport { useGridApiMethod } from '../utils';\nvar forceDebug = localStorageAvailable() && window.localStorage.getItem('DEBUG') != null;\nvar noop = function noop() {};\nvar noopLogger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop\n};\nvar LOG_LEVELS = ['debug', 'info', 'warn', 'error'];\nfunction getAppender(name, logLevel) {\n  var appender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console;\n  var minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);\n  if (minLogLevelIdx === -1) {\n    throw new Error(\"MUI: Log level \".concat(logLevel, \" not recognized.\"));\n  }\n  var logger = LOG_LEVELS.reduce(function (loggerObj, method, idx) {\n    if (idx >= minLogLevelIdx) {\n      loggerObj[method] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        var message = args[0],\n          other = args.slice(1);\n        appender[method].apply(appender, [\"MUI: \".concat(name, \" - \").concat(message)].concat(_toConsumableArray(other)));\n      };\n    } else {\n      loggerObj[method] = noop;\n    }\n    return loggerObj;\n  }, {});\n  return logger;\n}\nexport var useGridLoggerFactory = function useGridLoggerFactory(apiRef, props) {\n  var getLogger = React.useCallback(function (name) {\n    if (forceDebug) {\n      return getAppender(name, 'debug', props.logger);\n    }\n    if (!props.logLevel) {\n      return noopLogger;\n    }\n    return getAppender(name, props.logLevel.toString(), props.logger);\n  }, [props.logLevel, props.logger]);\n  useGridApiMethod(apiRef, {\n    getLogger: getLogger\n  }, 'private');\n};","map":{"version":3,"names":["React","localStorageAvailable","useGridApiMethod","forceDebug","window","localStorage","getItem","noop","noopLogger","debug","info","warn","error","LOG_LEVELS","getAppender","name","logLevel","appender","arguments","length","undefined","console","minLogLevelIdx","indexOf","Error","concat","logger","reduce","loggerObj","method","idx","_len","args","Array","_key","message","other","slice","apply","_toConsumableArray","useGridLoggerFactory","apiRef","props","getLogger","useCallback","toString"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js"],"sourcesContent":["import * as React from 'react';\nimport { localStorageAvailable } from '../../utils/utils';\nimport { useGridApiMethod } from '../utils';\nconst forceDebug = localStorageAvailable() && window.localStorage.getItem('DEBUG') != null;\nconst noop = () => {};\nconst noopLogger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop\n};\nconst LOG_LEVELS = ['debug', 'info', 'warn', 'error'];\nfunction getAppender(name, logLevel, appender = console) {\n  const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);\n  if (minLogLevelIdx === -1) {\n    throw new Error(`MUI: Log level ${logLevel} not recognized.`);\n  }\n  const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {\n    if (idx >= minLogLevelIdx) {\n      loggerObj[method] = (...args) => {\n        const [message, ...other] = args;\n        appender[method](`MUI: ${name} - ${message}`, ...other);\n      };\n    } else {\n      loggerObj[method] = noop;\n    }\n    return loggerObj;\n  }, {});\n  return logger;\n}\nexport const useGridLoggerFactory = (apiRef, props) => {\n  const getLogger = React.useCallback(name => {\n    if (forceDebug) {\n      return getAppender(name, 'debug', props.logger);\n    }\n    if (!props.logLevel) {\n      return noopLogger;\n    }\n    return getAppender(name, props.logLevel.toString(), props.logger);\n  }, [props.logLevel, props.logger]);\n  useGridApiMethod(apiRef, {\n    getLogger\n  }, 'private');\n};"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,qBAAqB,QAAQ,mBAAmB;AACzD,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,IAAMC,UAAU,GAAGF,qBAAqB,CAAC,CAAC,IAAIG,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;AAC1F,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS,CAAC,CAAC;AACrB,IAAMC,UAAU,GAAG;EACjBC,KAAK,EAAEF,IAAI;EACXG,IAAI,EAAEH,IAAI;EACVI,IAAI,EAAEJ,IAAI;EACVK,KAAK,EAAEL;AACT,CAAC;AACD,IAAMM,UAAU,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;AACrD,SAASC,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAsB;EAAA,IAApBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,OAAO;EACrD,IAAMC,cAAc,GAAGT,UAAU,CAACU,OAAO,CAACP,QAAQ,CAAC;EACnD,IAAIM,cAAc,KAAK,CAAC,CAAC,EAAE;IACzB,MAAM,IAAIE,KAAK,mBAAAC,MAAA,CAAmBT,QAAQ,qBAAkB,CAAC;EAC/D;EACA,IAAMU,MAAM,GAAGb,UAAU,CAACc,MAAM,CAAC,UAACC,SAAS,EAAEC,MAAM,EAAEC,GAAG,EAAK;IAC3D,IAAIA,GAAG,IAAIR,cAAc,EAAE;MACzBM,SAAS,CAACC,MAAM,CAAC,GAAG,YAAa;QAAA,SAAAE,IAAA,GAAAb,SAAA,CAAAC,MAAA,EAATa,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;UAAJF,IAAI,CAAAE,IAAA,IAAAhB,SAAA,CAAAgB,IAAA;QAAA;QAC1B,IAAOC,OAAO,GAAcH,IAAI;UAAbI,KAAK,GAAIJ,IAAI,CAAAK,KAAA;QAChCpB,QAAQ,CAACY,MAAM,CAAC,CAAAS,KAAA,CAAhBrB,QAAQ,WAAAQ,MAAA,CAAiBV,IAAI,SAAAU,MAAA,CAAMU,OAAO,GAAAV,MAAA,CAAAc,kBAAA,CAAOH,KAAK,GAAC;MACzD,CAAC;IACH,CAAC,MAAM;MACLR,SAAS,CAACC,MAAM,CAAC,GAAGtB,IAAI;IAC1B;IACA,OAAOqB,SAAS;EAClB,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,OAAOF,MAAM;AACf;AACA,OAAO,IAAMc,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,MAAM,EAAEC,KAAK,EAAK;EACrD,IAAMC,SAAS,GAAG3C,KAAK,CAAC4C,WAAW,CAAC,UAAA7B,IAAI,EAAI;IAC1C,IAAIZ,UAAU,EAAE;MACd,OAAOW,WAAW,CAACC,IAAI,EAAE,OAAO,EAAE2B,KAAK,CAAChB,MAAM,CAAC;IACjD;IACA,IAAI,CAACgB,KAAK,CAAC1B,QAAQ,EAAE;MACnB,OAAOR,UAAU;IACnB;IACA,OAAOM,WAAW,CAACC,IAAI,EAAE2B,KAAK,CAAC1B,QAAQ,CAAC6B,QAAQ,CAAC,CAAC,EAAEH,KAAK,CAAChB,MAAM,CAAC;EACnE,CAAC,EAAE,CAACgB,KAAK,CAAC1B,QAAQ,EAAE0B,KAAK,CAAChB,MAAM,CAAC,CAAC;EAClCxB,gBAAgB,CAACuC,MAAM,EAAE;IACvBE,SAAS,EAATA;EACF,CAAC,EAAE,SAAS,CAAC;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}