{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { getGridDefaultColumnTypes } from '../../../colDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultColumnTypes = getGridDefaultColumnTypes();\nexport var columnsStateInitializer = function columnsStateInitializer(state, props, apiRef) {\n  var _props$initialState, _ref, _props$columnVisibili, _props$initialState2, _props$initialState2$;\n  var columnsState = createColumnsState({\n    apiRef: apiRef,\n    columnTypes: defaultColumnTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.columns,\n    columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.columns) == null ? void 0 : _props$initialState2$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$slotProps2;\n  var logger = useGridLogger(apiRef, 'useGridColumns');\n  var columnTypes = defaultColumnTypes;\n  var previousColumnsProp = React.useRef(props.columns);\n  var previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  var setGridColumnsState = React.useCallback(function (columnsState) {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  var getColumn = React.useCallback(function (field) {\n    return gridColumnLookupSelector(apiRef)[field];\n  }, [apiRef]);\n  var getAllColumns = React.useCallback(function () {\n    return gridColumnDefinitionsSelector(apiRef);\n  }, [apiRef]);\n  var getVisibleColumns = React.useCallback(function () {\n    return gridVisibleColumnDefinitionsSelector(apiRef);\n  }, [apiRef]);\n  var getColumnIndex = React.useCallback(function (field) {\n    var useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(function (col) {\n      return col.field === field;\n    });\n  }, [apiRef]);\n  var getColumnPosition = React.useCallback(function (field) {\n    var index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  var setColumnVisibilityModel = React.useCallback(function (model) {\n    var currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          columns: createColumnsState({\n            apiRef: apiRef,\n            columnTypes: columnTypes,\n            columnsToUpsert: [],\n            initialState: undefined,\n            columnVisibilityModel: model,\n            keepOnlyColumnsToUpsert: false\n          })\n        });\n      });\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  var updateColumns = React.useCallback(function (columns) {\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  var setColumnVisibility = React.useCallback(function (field, isVisible) {\n    var _columnVisibilityMode;\n    var columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    var isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n    if (isVisible !== isCurrentlyVisible) {\n      var newModel = _extends({}, columnVisibilityModel, _defineProperty({}, field, isVisible));\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  var getColumnIndexRelativeToVisibleColumns = React.useCallback(function (field) {\n    var allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(function (col) {\n      return col === field;\n    });\n  }, [apiRef]);\n  var setColumnIndex = React.useCallback(function (field, targetIndexPosition) {\n    var allColumns = gridColumnFieldsSelector(apiRef);\n    var oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(\"Moving column \".concat(field, \" to index \").concat(targetIndexPosition));\n    var updatedColumns = _toConsumableArray(allColumns);\n    var fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    var params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  var setColumnWidth = React.useCallback(function (field, width) {\n    logger.debug(\"Updating column \".concat(field, \" width to \").concat(width));\n    var column = apiRef.current.getColumn(field);\n    var newColumn = _extends({}, column, {\n      width: width\n    });\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width: width\n    });\n  }, [apiRef, logger]);\n  var columnApi = {\n    getColumn: getColumn,\n    getAllColumns: getAllColumns,\n    getColumnIndex: getColumnIndex,\n    getColumnPosition: getColumnPosition,\n    getVisibleColumns: getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns: getColumnIndexRelativeToVisibleColumns,\n    updateColumns: updateColumns,\n    setColumnVisibilityModel: setColumnVisibilityModel,\n    setColumnVisibility: setColumnVisibility,\n    setColumnWidth: setColumnWidth\n  };\n  var columnReorderApi = {\n    setColumnIndex: setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  var stateExportPreProcessing = React.useCallback(function (prevState, context) {\n    var _props$initialState$c, _props$initialState3, _props$initialState3$;\n    var columnsStateToExport = {};\n    var columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    var shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _props$initialState$c : {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    var columns = gridColumnDefinitionsSelector(apiRef);\n    var dimensions = {};\n    columns.forEach(function (colDef) {\n      if (colDef.hasBeenResized) {\n        var colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(function (propertyName) {\n          var propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.columns]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto;\n    var columnVisibilityModelToImport = (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel;\n    var initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      columnsToUpsert: [],\n      initialState: initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef, columnTypes]);\n  var preferencePanelPreProcessing = React.useCallback(function (initialValue, value) {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$slotProps;\n      var ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.columnsPanel]);\n  var addColumnMenuItems = React.useCallback(function (columnMenuItems) {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n    return [].concat(_toConsumableArray(columnMenuItems), ['columnMenuColumnsItem']);\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /**\n   * EVENTS\n   */\n  var prevInnerWidth = React.useRef(null);\n  var handleGridSizeChange = function handleGridSizeChange(viewportInnerSize) {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  var hydrateColumns = React.useCallback(function () {\n    logger.info(\"Columns pipe processing have changed, regenerating the columns\");\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(\"GridColumns have changed, new length \".concat(props.columns.length));\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(function () {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsStateSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","GridSignature","useGridApiEventHandler","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","hydrateColumnsWidth","createColumnsState","mergeColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","getGridDefaultColumnTypes","jsx","_jsx","defaultColumnTypes","columnsStateInitializer","state","props","apiRef","_props$initialState","_ref","_props$columnVisibili","_props$initialState2","_props$initialState2$","columnsState","columnTypes","columnsToUpsert","columns","initialState","columnVisibilityModel","keepOnlyColumnsToUpsert","useGridColumns","_props$initialState4","_props$slotProps2","logger","previousColumnsProp","useRef","previousColumnTypesProp","current","registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","forceUpdate","publishEvent","orderedFields","getColumn","field","getAllColumns","getVisibleColumns","getColumnIndex","useVisibleColumns","arguments","length","undefined","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","updateColumns","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","_defineProperty","getColumnIndexRelativeToVisibleColumns","allColumns","setColumnIndex","targetIndexPosition","oldIndexPosition","concat","updatedColumns","_toConsumableArray","fieldRemoved","splice","params","column","targetIndex","oldIndex","setColumnWidth","width","newColumn","element","getColumnHeaderElement","colDef","columnApi","columnReorderApi","signature","DataGrid","stateExportPreProcessing","prevState","context","_props$initialState$c","_props$initialState3","_props$initialState3$","columnsStateToExport","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","Object","keys","dimensions","forEach","hasBeenResized","colDefDimensions","propertyName","propertyValue","Infinity","stateRestorePreProcessing","_context$stateToResto","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","value","_props$slotProps","ColumnsPanel","slots","columnsPanel","slotProps","addColumnMenuItems","columnMenuItems","disableColumnSelector","prevInnerWidth","handleGridSizeChange","viewportInnerSize","hydrateColumns","info","isFirstRender","useEffect"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { getGridDefaultColumnTypes } from '../../../colDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultColumnTypes = getGridDefaultColumnTypes();\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _ref, _props$columnVisibili, _props$initialState2, _props$initialState2$;\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: defaultColumnTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.columns,\n    columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.columns) == null ? void 0 : _props$initialState2$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = defaultColumnTypes;\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    var _columnVisibilityMode;\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n    const newColumn = _extends({}, column, {\n      width\n    });\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState$c, _props$initialState3, _props$initialState3$;\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _props$initialState$c : {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const columnVisibilityModelToImport = (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$slotProps;\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}