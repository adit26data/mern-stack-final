{"ast":null,"code":"export var isEscapeKey = function isEscapeKey(key) {\n  return key === 'Escape';\n}; // TODO remove\nexport var isEnterKey = function isEnterKey(key) {\n  return key === 'Enter';\n}; // TODO remove\nexport var isTabKey = function isTabKey(key) {\n  return key === 'Tab';\n}; // TODO remove\n\nexport var isSpaceKey = function isSpaceKey(key) {\n  return key === ' ';\n};\nexport var isArrowKeys = function isArrowKeys(key) {\n  return key.indexOf('Arrow') === 0;\n};\nexport var isHomeOrEndKeys = function isHomeOrEndKeys(key) {\n  return key === 'Home' || key === 'End';\n};\nexport var isPageKeys = function isPageKeys(key) {\n  return key.indexOf('Page') === 0;\n};\nexport var isDeleteKeys = function isDeleteKeys(key) {\n  return key === 'Delete' || key === 'Backspace';\n};\n\n// Non printable keys have a name, e.g. \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// We need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\nexport function isPrintableKey(event) {\n  return event.key.length === 1 && event.ctrlKey === false && event.metaKey === false;\n}\nexport var GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nexport var GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nexport var GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nexport var isMultipleKey = function isMultipleKey(key) {\n  return GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\n};\nexport var isCellEnterEditModeKeys = function isCellEnterEditModeKeys(event) {\n  return isEnterKey(event.key) || isDeleteKeys(event.key) || isPrintableKey(event);\n};\nexport var isCellExitEditModeKeys = function isCellExitEditModeKeys(key) {\n  return GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\n};\nexport var isCellEditCommitKeys = function isCellEditCommitKeys(key) {\n  return GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\n};\nexport var isNavigationKey = function isNavigationKey(key) {\n  return isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);\n};\nexport var isKeyboardEvent = function isKeyboardEvent(event) {\n  return !!event.key;\n};\nexport var isHideMenuKey = function isHideMenuKey(key) {\n  return isTabKey(key) || isEscapeKey(key);\n};","map":{"version":3,"names":["isEscapeKey","key","isEnterKey","isTabKey","isSpaceKey","isArrowKeys","indexOf","isHomeOrEndKeys","isPageKeys","isDeleteKeys","isPrintableKey","event","length","ctrlKey","metaKey","GRID_MULTIPLE_SELECTION_KEYS","GRID_CELL_EXIT_EDIT_MODE_KEYS","GRID_CELL_EDIT_COMMIT_KEYS","isMultipleKey","isCellEnterEditModeKeys","isCellExitEditModeKeys","isCellEditCommitKeys","isNavigationKey","isKeyboardEvent","isHideMenuKey"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/utils/keyboardUtils.js"],"sourcesContent":["export const isEscapeKey = key => key === 'Escape'; // TODO remove\nexport const isEnterKey = key => key === 'Enter'; // TODO remove\nexport const isTabKey = key => key === 'Tab'; // TODO remove\n\nexport const isSpaceKey = key => key === ' ';\nexport const isArrowKeys = key => key.indexOf('Arrow') === 0;\nexport const isHomeOrEndKeys = key => key === 'Home' || key === 'End';\nexport const isPageKeys = key => key.indexOf('Page') === 0;\nexport const isDeleteKeys = key => key === 'Delete' || key === 'Backspace';\n\n// Non printable keys have a name, e.g. \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// We need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\nexport function isPrintableKey(event) {\n  return event.key.length === 1 && event.ctrlKey === false && event.metaKey === false;\n}\nexport const GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nexport const GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nexport const GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nexport const isMultipleKey = key => GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\nexport const isCellEnterEditModeKeys = event => isEnterKey(event.key) || isDeleteKeys(event.key) || isPrintableKey(event);\nexport const isCellExitEditModeKeys = key => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\nexport const isCellEditCommitKeys = key => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\nexport const isNavigationKey = key => isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);\nexport const isKeyboardEvent = event => !!event.key;\nexport const isHideMenuKey = key => isTabKey(key) || isEscapeKey(key);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}