{"ast":null,"code":"import _slicedToArray from \"C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nvar getSelectionModelPropValue = function getSelectionModelPropValue(selectionModelProp, prevSelectionModel) {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport var rowSelectionStateInitializer = function rowSelectionStateInitializer(state, props) {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport var useGridRowSelection = function useGridRowSelection(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridSelection');\n  var runIfRowSelectionIsEnabled = function runIfRowSelectionIsEnabled(callback) {\n    return function () {\n      if (props.rowSelection) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n  var propRowSelectionModel = React.useMemo(function () {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  var lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  var checkboxSelection = props.checkboxSelection,\n    disableMultipleRowSelection = props.disableMultipleRowSelection,\n    disableRowSelectionOnClick = props.disableRowSelectionOnClick,\n    propIsRowSelectable = props.isRowSelectable;\n  var canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  var visibleRows = useGridVisibleRows(apiRef, props);\n  var expandMouseRowRangeSelection = React.useCallback(function (id) {\n    var _lastRowToggled$curre;\n    var endId = id;\n    var startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    var isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      var visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      var startIndex = visibleRowIds.findIndex(function (rowId) {\n        return rowId === startId;\n      });\n      var endIndex = visibleRowIds.findIndex(function (rowId) {\n        return rowId === endId;\n      });\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId: startId,\n      endId: endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  var setRowSelectionModel = React.useCallback(function (model) {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    var currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(\"Setting selection model\");\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          rowSelection: props.rowSelection ? model : []\n        });\n      });\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  var isRowSelected = React.useCallback(function (id) {\n    return gridRowSelectionStateSelector(apiRef.current.state).includes(id);\n  }, [apiRef]);\n  var isRowSelectable = React.useCallback(function (id) {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    var rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  var getSelectedRows = React.useCallback(function () {\n    return selectedGridRowsSelector(apiRef);\n  }, [apiRef]);\n  var selectRow = React.useCallback(function (id) {\n    var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(\"Setting selection for row \".concat(id));\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(\"Toggling selection for row \".concat(id));\n      var selection = gridRowSelectionStateSelector(apiRef.current.state);\n      var newSelection = selection.filter(function (el) {\n        return el !== id;\n      });\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      var isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  var selectRows = React.useCallback(function (ids) {\n    var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(\"Setting selection for several rows\");\n    var selectableIds = ids.filter(function (id) {\n      return apiRef.current.isRowSelectable(id);\n    });\n    var newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      var selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(function (id) {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    var isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  var selectRowRange = React.useCallback(function (_ref) {\n    var startId = _ref.startId,\n      endId = _ref.endId;\n    var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(\"Expanding selection from row \".concat(startId, \" to row \").concat(endId));\n\n    // Using rows from all pages allow to select a range across several pages\n    var allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    var startIndex = allPagesRowIds.indexOf(startId);\n    var endIndex = allPagesRowIds.indexOf(endId);\n    var _ref2 = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex],\n      _ref3 = _slicedToArray(_ref2, 2),\n      start = _ref3[0],\n      end = _ref3[1];\n    var rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  var selectionPublicApi = {\n    selectRow: selectRow,\n    setRowSelectionModel: setRowSelectionModel,\n    getSelectedRows: getSelectedRows,\n    isRowSelected: isRowSelected,\n    isRowSelectable: isRowSelectable\n  };\n  var selectionPrivateApi = {\n    selectRows: selectRows,\n    selectRowRange: selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  var removeOutdatedSelection = React.useCallback(function () {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    var currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    var rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    var selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    var hasChanged = false;\n    currentSelection.forEach(function (id) {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  var handleSingleRowSelection = React.useCallback(function (id, event) {\n    var hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    var isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    var resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    var isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  var handleRowClick = React.useCallback(function (params, event) {\n    var _closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    var field = (_closest = event.target.closest(\".\".concat(gridClasses.cell))) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      var column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    var rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  var preventSelectionOnShift = React.useCallback(function (params, event) {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  var handleRowSelectionCheckboxChange = React.useCallback(function (params, event) {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  var handleHeaderSelectionCheckboxChange = React.useCallback(function (params) {\n    var shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    var rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      var focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        var isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        var newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        var previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        var start;\n        var end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        var rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(function (row) {\n          return row.id;\n        });\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(function () {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(function () {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  var isStateControlled = propRowSelectionModel != null;\n  React.useEffect(function () {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    var currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      var newSelection = currentSelection.filter(function (id) {\n        return isRowSelectable(id);\n      });\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(function () {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    var currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};","map":{"version":3,"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","_getSelectionModelPro","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","callback","apply","arguments","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableMultipleRowSelection","disableRowSelectionOnClick","propIsRowSelectable","isRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","signature","DataGrid","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","undefined","resetSelection","concat","selection","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","_ref","getRow","allPagesRowIds","indexOf","_ref2","_ref3","_slicedToArray","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_closest","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","pagination","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","getAllRowIds","useEffect","isStateControlled"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleRowSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}