{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nexport const GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;\nexport const buildRootGroup = () => ({\n  type: 'group',\n  id: GRID_ROOT_GROUP_ID,\n  depth: -1,\n  groupingField: null,\n  groupingKey: null,\n  isAutoGenerated: true,\n  children: [],\n  childrenFromPath: {},\n  childrenExpanded: true,\n  parent: null\n});\n\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\nexport function checkGridRowIdIsValid(id, row) {\n  let detailErrorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'A row was provided without id in the rows prop:';\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = _ref => {\n  let {\n    rows,\n    getRowId,\n    loading,\n    rowCount\n  } = _ref;\n  const updates = {\n    type: 'full',\n    rows: []\n  };\n  const dataRowIdToModelLookup = {};\n  const dataRowIdToIdLookup = {};\n  for (let i = 0; i < rows.length; i += 1) {\n    const model = rows[i];\n    const id = getRowIdFromRowModel(model, getRowId);\n    dataRowIdToModelLookup[id] = model;\n    dataRowIdToIdLookup[id] = id;\n    updates.rows.push(id);\n  }\n  return {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    updates,\n    dataRowIdToIdLookup,\n    dataRowIdToModelLookup\n  };\n};\nexport const getTopLevelRowCount = _ref2 => {\n  let {\n    tree,\n    rowCountProp = 0\n  } = _ref2;\n  const rootGroupNode = tree[GRID_ROOT_GROUP_ID];\n  return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));\n};\nexport const getRowsStateFromCache = _ref3 => {\n  let {\n    apiRef,\n    rowCountProp = 0,\n    loadingProp,\n    previousTree,\n    previousTreeDepths\n  } = _ref3;\n  const cache = apiRef.current.caches.rows;\n\n  // 1. Apply the \"rowTreeCreation\" family processing.\n  const {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIds: unProcessedDataRowIds,\n    groupingName\n  } = apiRef.current.applyStrategyProcessor('rowTreeCreation', {\n    previousTree,\n    previousTreeDepths,\n    updates: cache.updates,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  });\n\n  // 2. Apply the \"hydrateRows\" pipe-processing.\n  const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIds: unProcessedDataRowIds,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  });\n\n  // 3. Reset the cache updates\n  apiRef.current.caches.rows.updates = {\n    type: 'partial',\n    actions: {\n      insert: [],\n      modify: [],\n      remove: []\n    },\n    idToActionLookup: {}\n  };\n  return _extends({}, groupingParamsWithHydrateRows, {\n    totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),\n    totalTopLevelRowCount: getTopLevelRowCount({\n      tree: groupingParamsWithHydrateRows.tree,\n      rowCountProp\n    }),\n    groupingName,\n    loading: loadingProp\n  });\n};\nexport const isAutoGeneratedRow = rowNode => rowNode.type === 'skeletonRow' || rowNode.type === 'footer' || rowNode.type === 'group' && rowNode.isAutoGenerated || rowNode.type === 'pinnedRow' && rowNode.isAutoGenerated;\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  const node = tree[parentId];\n  if (node.type !== 'group') {\n    return [];\n  }\n  const validDescendants = [];\n  for (let i = 0; i < node.children.length; i += 1) {\n    const child = node.children[i];\n    if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[child])) {\n      validDescendants.push(child);\n    }\n    validDescendants.push(...getTreeNodeDescendants(tree, child, skipAutoGeneratedRows));\n  }\n  if (!skipAutoGeneratedRows && node.footerId != null) {\n    validDescendants.push(node.footerId);\n  }\n  return validDescendants;\n};\nexport const updateCacheWithNewRows = _ref4 => {\n  let {\n    previousCache,\n    getRowId,\n    updates\n  } = _ref4;\n  var _previousCache$update, _previousCache$update2, _previousCache$update3;\n  if (previousCache.updates.type === 'full') {\n    throw new Error('MUI: Unable to prepare a partial update if a full update is not applied yet');\n  }\n\n  // Remove duplicate updates.\n  // A server can batch updates, and send several updates for the same row in one fn call.\n  const uniqueUpdates = new Map();\n  updates.forEach(update => {\n    const id = getRowIdFromRowModel(update, getRowId, 'A row was provided without id when calling updateRows():');\n    if (uniqueUpdates.has(id)) {\n      uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));\n    } else {\n      uniqueUpdates.set(id, update);\n    }\n  });\n  const partialUpdates = {\n    type: 'partial',\n    actions: {\n      insert: [...((_previousCache$update = previousCache.updates.actions.insert) != null ? _previousCache$update : [])],\n      modify: [...((_previousCache$update2 = previousCache.updates.actions.modify) != null ? _previousCache$update2 : [])],\n      remove: [...((_previousCache$update3 = previousCache.updates.actions.remove) != null ? _previousCache$update3 : [])]\n    },\n    idToActionLookup: _extends({}, previousCache.updates.idToActionLookup)\n  };\n  const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);\n  const dataRowIdToIdLookup = _extends({}, previousCache.dataRowIdToIdLookup);\n  const alreadyAppliedActionsToRemove = {\n    insert: {},\n    modify: {},\n    remove: {}\n  };\n\n  // Depending on the action already applied to the data row,\n  // We might want drop the already-applied-update.\n  // For instance:\n  // - if you delete then insert, then you don't want to apply the deletion in the tree.\n  // - if you insert, then modify, then you just want to apply the insertion in the tree.\n  uniqueUpdates.forEach((partialRow, id) => {\n    const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];\n\n    // Action === \"delete\"\n    // eslint-disable-next-line no-underscore-dangle\n    if (partialRow._action === 'delete') {\n      // If the data row has been removed since the last state update,\n      // Then do nothing.\n      if (actionAlreadyAppliedToRow === 'remove' || !dataRowIdToModelLookup[id]) {\n        return;\n      }\n\n      // If the data row has been inserted / modified since the last state update,\n      // Then drop this \"insert\" / \"modify\" update.\n      if (actionAlreadyAppliedToRow != null) {\n        alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;\n      }\n\n      // Remove the data row from the lookups and add it to the \"delete\" update.\n      partialUpdates.actions.remove.push(id);\n      delete dataRowIdToModelLookup[id];\n      delete dataRowIdToIdLookup[id];\n      return;\n    }\n    const oldRow = dataRowIdToModelLookup[id];\n\n    // Action === \"modify\"\n    if (oldRow) {\n      // If the data row has been removed since the last state update,\n      // Then drop this \"remove\" update and add it to the \"modify\" update instead.\n      if (actionAlreadyAppliedToRow === 'remove') {\n        alreadyAppliedActionsToRemove.remove[id] = true;\n        partialUpdates.actions.modify.push(id);\n      }\n      // If the date has not been inserted / modified since the last state update,\n      // Then add it to the \"modify\" update (if it has been inserted it should just remain \"inserted\").\n      else if (actionAlreadyAppliedToRow == null) {\n        partialUpdates.actions.modify.push(id);\n      }\n\n      // Update the data row lookups.\n      dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);\n      return;\n    }\n\n    // Action === \"insert\"\n    // If the data row has been removed since the last state update,\n    // Then drop the \"remove\" update and add it to the \"insert\" update instead.\n    if (actionAlreadyAppliedToRow === 'remove') {\n      alreadyAppliedActionsToRemove.remove[id] = true;\n      partialUpdates.actions.insert.push(id);\n    }\n    // If the data row has not been inserted since the last state update,\n    // Then add it to the \"insert\" update.\n    // `actionAlreadyAppliedToRow` can't be equal to \"modify\", otherwise we would have an `oldRow` above.\n    else if (actionAlreadyAppliedToRow == null) {\n      partialUpdates.actions.insert.push(id);\n    }\n\n    // Update the data row lookups.\n    dataRowIdToModelLookup[id] = partialRow;\n    dataRowIdToIdLookup[id] = id;\n  });\n  const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);\n  for (let i = 0; i < actionTypeWithActionsToRemove.length; i += 1) {\n    const actionType = actionTypeWithActionsToRemove[i];\n    const idsToRemove = alreadyAppliedActionsToRemove[actionType];\n    if (Object.keys(idsToRemove).length > 0) {\n      partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter(id => !idsToRemove[id]);\n    }\n  }\n  return {\n    dataRowIdToModelLookup,\n    dataRowIdToIdLookup,\n    updates: partialUpdates,\n    rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,\n    loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,\n    rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates\n  };\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  var _pinnedRows$top, _pinnedRows$bottom;\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}\nexport function getMinimalContentHeight(apiRef, rowHeight) {\n  const densityFactor = gridDensityFactorSelector(apiRef);\n  return 2 * Math.floor(rowHeight * densityFactor);\n}","map":{"version":3,"names":["_extends","gridPinnedRowsSelector","gridDensityFactorSelector","GRID_ROOT_GROUP_ID","buildRootGroup","type","id","depth","groupingField","groupingKey","isAutoGenerated","children","childrenFromPath","childrenExpanded","parent","checkGridRowIdIsValid","row","detailErrorMessage","arguments","length","undefined","Error","JSON","stringify","join","getRowIdFromRowModel","rowModel","getRowId","createRowsInternalCache","_ref","rows","loading","rowCount","updates","dataRowIdToModelLookup","dataRowIdToIdLookup","i","model","push","rowsBeforePartialUpdates","loadingPropBeforePartialUpdates","rowCountPropBeforePartialUpdates","getTopLevelRowCount","_ref2","tree","rowCountProp","rootGroupNode","Math","max","footerId","getRowsStateFromCache","_ref3","apiRef","loadingProp","previousTree","previousTreeDepths","cache","current","caches","unProcessedTree","treeDepths","unProcessedTreeDepths","dataRowIds","unProcessedDataRowIds","groupingName","applyStrategyProcessor","groupingParamsWithHydrateRows","unstable_applyPipeProcessors","actions","insert","modify","remove","idToActionLookup","totalRowCount","totalTopLevelRowCount","isAutoGeneratedRow","rowNode","getTreeNodeDescendants","parentId","skipAutoGeneratedRows","node","validDescendants","child","updateCacheWithNewRows","_ref4","previousCache","_previousCache$update","_previousCache$update2","_previousCache$update3","uniqueUpdates","Map","forEach","update","has","set","get","partialUpdates","alreadyAppliedActionsToRemove","partialRow","actionAlreadyAppliedToRow","_action","oldRow","actionTypeWithActionsToRemove","Object","keys","actionType","idsToRemove","filter","calculatePinnedRowsHeight","_pinnedRows$top","_pinnedRows$bottom","pinnedRows","topPinnedRowsHeight","top","reduce","acc","value","unstable_getRowHeight","bottomPinnedRowsHeight","bottom","getMinimalContentHeight","rowHeight","densityFactor","floor"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nexport const GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;\nexport const buildRootGroup = () => ({\n  type: 'group',\n  id: GRID_ROOT_GROUP_ID,\n  depth: -1,\n  groupingField: null,\n  groupingKey: null,\n  isAutoGenerated: true,\n  children: [],\n  childrenFromPath: {},\n  childrenExpanded: true,\n  parent: null\n});\n\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\nexport function checkGridRowIdIsValid(id, row, detailErrorMessage = 'A row was provided without id in the rows prop:') {\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = ({\n  rows,\n  getRowId,\n  loading,\n  rowCount\n}) => {\n  const updates = {\n    type: 'full',\n    rows: []\n  };\n  const dataRowIdToModelLookup = {};\n  const dataRowIdToIdLookup = {};\n  for (let i = 0; i < rows.length; i += 1) {\n    const model = rows[i];\n    const id = getRowIdFromRowModel(model, getRowId);\n    dataRowIdToModelLookup[id] = model;\n    dataRowIdToIdLookup[id] = id;\n    updates.rows.push(id);\n  }\n  return {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    updates,\n    dataRowIdToIdLookup,\n    dataRowIdToModelLookup\n  };\n};\nexport const getTopLevelRowCount = ({\n  tree,\n  rowCountProp = 0\n}) => {\n  const rootGroupNode = tree[GRID_ROOT_GROUP_ID];\n  return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));\n};\nexport const getRowsStateFromCache = ({\n  apiRef,\n  rowCountProp = 0,\n  loadingProp,\n  previousTree,\n  previousTreeDepths\n}) => {\n  const cache = apiRef.current.caches.rows;\n\n  // 1. Apply the \"rowTreeCreation\" family processing.\n  const {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIds: unProcessedDataRowIds,\n    groupingName\n  } = apiRef.current.applyStrategyProcessor('rowTreeCreation', {\n    previousTree,\n    previousTreeDepths,\n    updates: cache.updates,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  });\n\n  // 2. Apply the \"hydrateRows\" pipe-processing.\n  const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n    tree: unProcessedTree,\n    treeDepths: unProcessedTreeDepths,\n    dataRowIdToIdLookup: cache.dataRowIdToIdLookup,\n    dataRowIds: unProcessedDataRowIds,\n    dataRowIdToModelLookup: cache.dataRowIdToModelLookup\n  });\n\n  // 3. Reset the cache updates\n  apiRef.current.caches.rows.updates = {\n    type: 'partial',\n    actions: {\n      insert: [],\n      modify: [],\n      remove: []\n    },\n    idToActionLookup: {}\n  };\n  return _extends({}, groupingParamsWithHydrateRows, {\n    totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),\n    totalTopLevelRowCount: getTopLevelRowCount({\n      tree: groupingParamsWithHydrateRows.tree,\n      rowCountProp\n    }),\n    groupingName,\n    loading: loadingProp\n  });\n};\nexport const isAutoGeneratedRow = rowNode => rowNode.type === 'skeletonRow' || rowNode.type === 'footer' || rowNode.type === 'group' && rowNode.isAutoGenerated || rowNode.type === 'pinnedRow' && rowNode.isAutoGenerated;\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  const node = tree[parentId];\n  if (node.type !== 'group') {\n    return [];\n  }\n  const validDescendants = [];\n  for (let i = 0; i < node.children.length; i += 1) {\n    const child = node.children[i];\n    if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[child])) {\n      validDescendants.push(child);\n    }\n    validDescendants.push(...getTreeNodeDescendants(tree, child, skipAutoGeneratedRows));\n  }\n  if (!skipAutoGeneratedRows && node.footerId != null) {\n    validDescendants.push(node.footerId);\n  }\n  return validDescendants;\n};\nexport const updateCacheWithNewRows = ({\n  previousCache,\n  getRowId,\n  updates\n}) => {\n  var _previousCache$update, _previousCache$update2, _previousCache$update3;\n  if (previousCache.updates.type === 'full') {\n    throw new Error('MUI: Unable to prepare a partial update if a full update is not applied yet');\n  }\n\n  // Remove duplicate updates.\n  // A server can batch updates, and send several updates for the same row in one fn call.\n  const uniqueUpdates = new Map();\n  updates.forEach(update => {\n    const id = getRowIdFromRowModel(update, getRowId, 'A row was provided without id when calling updateRows():');\n    if (uniqueUpdates.has(id)) {\n      uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));\n    } else {\n      uniqueUpdates.set(id, update);\n    }\n  });\n  const partialUpdates = {\n    type: 'partial',\n    actions: {\n      insert: [...((_previousCache$update = previousCache.updates.actions.insert) != null ? _previousCache$update : [])],\n      modify: [...((_previousCache$update2 = previousCache.updates.actions.modify) != null ? _previousCache$update2 : [])],\n      remove: [...((_previousCache$update3 = previousCache.updates.actions.remove) != null ? _previousCache$update3 : [])]\n    },\n    idToActionLookup: _extends({}, previousCache.updates.idToActionLookup)\n  };\n  const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);\n  const dataRowIdToIdLookup = _extends({}, previousCache.dataRowIdToIdLookup);\n  const alreadyAppliedActionsToRemove = {\n    insert: {},\n    modify: {},\n    remove: {}\n  };\n\n  // Depending on the action already applied to the data row,\n  // We might want drop the already-applied-update.\n  // For instance:\n  // - if you delete then insert, then you don't want to apply the deletion in the tree.\n  // - if you insert, then modify, then you just want to apply the insertion in the tree.\n  uniqueUpdates.forEach((partialRow, id) => {\n    const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];\n\n    // Action === \"delete\"\n    // eslint-disable-next-line no-underscore-dangle\n    if (partialRow._action === 'delete') {\n      // If the data row has been removed since the last state update,\n      // Then do nothing.\n      if (actionAlreadyAppliedToRow === 'remove' || !dataRowIdToModelLookup[id]) {\n        return;\n      }\n\n      // If the data row has been inserted / modified since the last state update,\n      // Then drop this \"insert\" / \"modify\" update.\n      if (actionAlreadyAppliedToRow != null) {\n        alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;\n      }\n\n      // Remove the data row from the lookups and add it to the \"delete\" update.\n      partialUpdates.actions.remove.push(id);\n      delete dataRowIdToModelLookup[id];\n      delete dataRowIdToIdLookup[id];\n      return;\n    }\n    const oldRow = dataRowIdToModelLookup[id];\n\n    // Action === \"modify\"\n    if (oldRow) {\n      // If the data row has been removed since the last state update,\n      // Then drop this \"remove\" update and add it to the \"modify\" update instead.\n      if (actionAlreadyAppliedToRow === 'remove') {\n        alreadyAppliedActionsToRemove.remove[id] = true;\n        partialUpdates.actions.modify.push(id);\n      }\n      // If the date has not been inserted / modified since the last state update,\n      // Then add it to the \"modify\" update (if it has been inserted it should just remain \"inserted\").\n      else if (actionAlreadyAppliedToRow == null) {\n        partialUpdates.actions.modify.push(id);\n      }\n\n      // Update the data row lookups.\n      dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);\n      return;\n    }\n\n    // Action === \"insert\"\n    // If the data row has been removed since the last state update,\n    // Then drop the \"remove\" update and add it to the \"insert\" update instead.\n    if (actionAlreadyAppliedToRow === 'remove') {\n      alreadyAppliedActionsToRemove.remove[id] = true;\n      partialUpdates.actions.insert.push(id);\n    }\n    // If the data row has not been inserted since the last state update,\n    // Then add it to the \"insert\" update.\n    // `actionAlreadyAppliedToRow` can't be equal to \"modify\", otherwise we would have an `oldRow` above.\n    else if (actionAlreadyAppliedToRow == null) {\n      partialUpdates.actions.insert.push(id);\n    }\n\n    // Update the data row lookups.\n    dataRowIdToModelLookup[id] = partialRow;\n    dataRowIdToIdLookup[id] = id;\n  });\n  const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);\n  for (let i = 0; i < actionTypeWithActionsToRemove.length; i += 1) {\n    const actionType = actionTypeWithActionsToRemove[i];\n    const idsToRemove = alreadyAppliedActionsToRemove[actionType];\n    if (Object.keys(idsToRemove).length > 0) {\n      partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter(id => !idsToRemove[id]);\n    }\n  }\n  return {\n    dataRowIdToModelLookup,\n    dataRowIdToIdLookup,\n    updates: partialUpdates,\n    rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,\n    loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,\n    rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates\n  };\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  var _pinnedRows$top, _pinnedRows$bottom;\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}\nexport function getMinimalContentHeight(apiRef, rowHeight) {\n  const densityFactor = gridDensityFactorSelector(apiRef);\n  return 2 * Math.floor(rowHeight * densityFactor);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}