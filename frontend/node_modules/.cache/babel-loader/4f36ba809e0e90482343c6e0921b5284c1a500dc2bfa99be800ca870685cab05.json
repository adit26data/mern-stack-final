{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nvar isSyntheticEvent = function isSyntheticEvent(event) {\n  return event.isPropagationStopped !== undefined;\n};\nvar globalId = 0;\nvar wrapPublicApi = function wrapPublicApi(publicApi) {\n  var privateOnlyApi = {};\n  privateOnlyApi.getPublicApi = function () {\n    return publicApi;\n  };\n  privateOnlyApi.register = function (visibility, methods) {\n    Object.keys(methods).forEach(function (methodName) {\n      if (visibility === 'public') {\n        publicApi[methodName] = methods[methodName];\n      } else {\n        privateOnlyApi[methodName] = methods[methodName];\n      }\n    });\n  };\n  var handler = {\n    get: function get(obj, prop) {\n      if (prop in obj) {\n        return obj[prop];\n      }\n      return privateOnlyApi[prop];\n    },\n    set: function set(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  return new Proxy(publicApi, handler);\n};\nexport function useGridApiInitialization(inputApiRef, props) {\n  var publicApiRef = React.useRef();\n  if (!publicApiRef.current) {\n    publicApiRef.current = {\n      state: {},\n      instanceId: {\n        id: globalId\n      }\n    };\n    globalId += 1;\n  }\n  var privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = wrapPublicApi(publicApiRef.current);\n    privateApiRef.current.register('private', {\n      caches: {},\n      eventManager: new EventManager()\n    });\n  }\n  React.useImperativeHandle(inputApiRef, function () {\n    return publicApiRef.current;\n  }, [publicApiRef]);\n  var publishEvent = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var name = args[0],\n      params = args[1],\n      _args$ = args[2],\n      event = _args$ === void 0 ? {} : _args$;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    var details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  var subscribeEvent = React.useCallback(function (event, handler, options) {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    var api = privateApiRef.current;\n    return function () {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent: subscribeEvent,\n    publishEvent: publishEvent\n  }, 'public');\n  React.useEffect(function () {\n    var api = privateApiRef.current;\n    return function () {\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}","map":{"version":3,"names":["React","useGridApiMethod","GridSignature","EventManager","isSyntheticEvent","event","isPropagationStopped","undefined","globalId","wrapPublicApi","publicApi","privateOnlyApi","getPublicApi","register","visibility","methods","Object","keys","forEach","methodName","handler","get","obj","prop","set","value","Proxy","useGridApiInitialization","inputApiRef","props","publicApiRef","useRef","current","state","instanceId","id","privateApiRef","caches","eventManager","useImperativeHandle","publishEvent","useCallback","_len","arguments","length","args","Array","_key","name","params","_args$","defaultMuiPrevented","details","signature","DataGridPro","api","emit","subscribeEvent","options","on","removeListener","useEffect"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nlet globalId = 0;\nconst wrapPublicApi = publicApi => {\n  const privateOnlyApi = {};\n  privateOnlyApi.getPublicApi = () => publicApi;\n  privateOnlyApi.register = (visibility, methods) => {\n    Object.keys(methods).forEach(methodName => {\n      if (visibility === 'public') {\n        publicApi[methodName] = methods[methodName];\n      } else {\n        privateOnlyApi[methodName] = methods[methodName];\n      }\n    });\n  };\n  const handler = {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        return obj[prop];\n      }\n      return privateOnlyApi[prop];\n    },\n    set: (obj, prop, value) => {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  return new Proxy(publicApi, handler);\n};\nexport function useGridApiInitialization(inputApiRef, props) {\n  const publicApiRef = React.useRef();\n  if (!publicApiRef.current) {\n    publicApiRef.current = {\n      state: {},\n      instanceId: {\n        id: globalId\n      }\n    };\n    globalId += 1;\n  }\n  const privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = wrapPublicApi(publicApiRef.current);\n    privateApiRef.current.register('private', {\n      caches: {},\n      eventManager: new EventManager()\n    });\n  }\n  React.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    const api = privateApiRef.current;\n    return () => {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent,\n    publishEvent\n  }, 'public');\n  React.useEffect(() => {\n    const api = privateApiRef.current;\n    return () => {\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}