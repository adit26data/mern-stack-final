{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN_FAIL, LOGIN_REQUEST, LOGIN_SUCCESS, LOAD_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, REGISTER_USER_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, LOGOUT_FAIL, LOGOUT_SUCCESS, CLEAR_ERRORS } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    let link = `/api/v1/login`;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(link, {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    let link = `/api/v1/register`;\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(link, userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//loading the user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    let link = `/api/v1/me`;\n    const {\n      data\n    } = await axios.post(link);\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axios","LOGIN_FAIL","LOGIN_REQUEST","LOGIN_SUCCESS","LOAD_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","REGISTER_USER_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","LOGOUT_FAIL","LOGOUT_SUCCESS","CLEAR_ERRORS","login","email","password","dispatch","type","link","config","headers","data","post","payload","user","error","response","message","register","userData","loadUser","clearErrors"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/src/actions/userAction.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { LOGIN_FAIL, LOGIN_REQUEST, LOGIN_SUCCESS, LOAD_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, REGISTER_USER_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, LOGOUT_FAIL, LOGOUT_SUCCESS, CLEAR_ERRORS } from \"../constants/userConstants\"\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LOGIN_REQUEST });\r\n        let link = `/api/v1/login`;\r\n        const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n        const { data } = await axios.post(link, { email, password }, config);\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: data.user\r\n        })\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: LOGIN_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const register = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: REGISTER_USER_REQUEST });\r\n        let link = `/api/v1/register`;\r\n        const config = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n        const { data } = await axios.post(link, userData, config);\r\n        dispatch({\r\n            type: REGISTER_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: REGISTER_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//loading the user\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LOAD_USER_REQUEST });\r\n        let link = `/api/v1/me`;\r\n        const { data } = await axios.post(link);\r\n        dispatch({\r\n            type: LOAD_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: LOAD_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({ type: CLEAR_ERRORS });\r\n\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,aAAa,EAAEC,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,kBAAkB,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,WAAW,EAAEC,cAAc,EAAEC,YAAY,QAAQ,4BAA4B;AAExP,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC1D,IAAI;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAEf;IAAc,CAAC,CAAC;IACjC,IAAIgB,IAAI,GAAI,eAAc;IAC1B,MAAMC,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC;IAClE,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAACJ,IAAI,EAAE;MAAEJ,KAAK;MAAEC;IAAS,CAAC,EAAEI,MAAM,CAAC;IACpEH,QAAQ,CAAC;MACLC,IAAI,EAAEd,aAAa;MACnBoB,OAAO,EAAEF,IAAI,CAACG;IAClB,CAAC,CAAC;EACN,CAAC,CACD,OAAOC,KAAK,EAAE;IACVT,QAAQ,CAAC;MACLC,IAAI,EAAEhB,UAAU;MAChBsB,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM;IACjC,CAAC,CAAC;EACN;AACJ,CAAC;AAGD,OAAO,MAAMC,QAAQ,GAAIC,QAAQ,IAAK,MAAOb,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAET;IAAsB,CAAC,CAAC;IACzC,IAAIU,IAAI,GAAI,kBAAiB;IAC7B,MAAMC,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IAAE,CAAC;IACrE,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAACJ,IAAI,EAAEW,QAAQ,EAAEV,MAAM,CAAC;IACzDH,QAAQ,CAAC;MACLC,IAAI,EAAER,qBAAqB;MAC3Bc,OAAO,EAAEF,IAAI,CAACG;IAClB,CAAC,CAAC;EACN,CAAC,CACD,OAAOC,KAAK,EAAE;IACVT,QAAQ,CAAC;MACLC,IAAI,EAAEV,kBAAkB;MACxBgB,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM;IACjC,CAAC,CAAC;EACN;AACJ,CAAC;;AAED;;AAEA,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAM,MAAOd,QAAQ,IAAK;EAC9C,IAAI;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAEZ;IAAkB,CAAC,CAAC;IACrC,IAAIa,IAAI,GAAI,YAAW;IACvB,MAAM;MAAEG;IAAK,CAAC,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAACJ,IAAI,CAAC;IACvCF,QAAQ,CAAC;MACLC,IAAI,EAAEX,iBAAiB;MACvBiB,OAAO,EAAEF,IAAI,CAACG;IAClB,CAAC,CAAC;EACN,CAAC,CACD,OAAOC,KAAK,EAAE;IACVT,QAAQ,CAAC;MACLC,IAAI,EAAEb,cAAc;MACpBmB,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM;IACjC,CAAC,CAAC;EACN;AACJ,CAAC;AAGD,OAAO,MAAMI,WAAW,GAAGA,CAAA,KAAM,MAAOf,QAAQ,IAAK;EACjDA,QAAQ,CAAC;IAAEC,IAAI,EAAEL;EAAa,CAAC,CAAC;AAEpC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}