{"ast":null,"code":"import * as React from 'react';\nimport { useFirstRender } from '../../utils/useFirstRender';\nexport var useGridRegisterPipeProcessor = function useGridRegisterPipeProcessor(apiRef, group, callback) {\n  var cleanup = React.useRef();\n  var id = React.useRef(\"mui-\".concat(Math.round(Math.random() * 1e9)));\n  var registerPreProcessor = React.useCallback(function () {\n    cleanup.current = apiRef.current.registerPipeProcessor(group, id.current, callback);\n  }, [apiRef, callback, group]);\n  useFirstRender(function () {\n    registerPreProcessor();\n  });\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      registerPreProcessor();\n    }\n    return function () {\n      if (cleanup.current) {\n        cleanup.current();\n        cleanup.current = null;\n      }\n    };\n  }, [registerPreProcessor]);\n};","map":{"version":3,"names":["React","useFirstRender","useGridRegisterPipeProcessor","apiRef","group","callback","cleanup","useRef","id","concat","Math","round","random","registerPreProcessor","useCallback","current","registerPipeProcessor","isFirstRender","useEffect"],"sources":["C:/Users/Adit/Desktop/mern-stack-final/frontend/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js"],"sourcesContent":["import * as React from 'react';\nimport { useFirstRender } from '../../utils/useFirstRender';\nexport const useGridRegisterPipeProcessor = (apiRef, group, callback) => {\n  const cleanup = React.useRef();\n  const id = React.useRef(`mui-${Math.round(Math.random() * 1e9)}`);\n  const registerPreProcessor = React.useCallback(() => {\n    cleanup.current = apiRef.current.registerPipeProcessor(group, id.current, callback);\n  }, [apiRef, callback, group]);\n  useFirstRender(() => {\n    registerPreProcessor();\n  });\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      registerPreProcessor();\n    }\n    return () => {\n      if (cleanup.current) {\n        cleanup.current();\n        cleanup.current = null;\n      }\n    };\n  }, [registerPreProcessor]);\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA4BA,CAAIC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAK;EACvE,IAAMC,OAAO,GAAGN,KAAK,CAACO,MAAM,CAAC,CAAC;EAC9B,IAAMC,EAAE,GAAGR,KAAK,CAACO,MAAM,QAAAE,MAAA,CAAQC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAE,CAAC;EACjE,IAAMC,oBAAoB,GAAGb,KAAK,CAACc,WAAW,CAAC,YAAM;IACnDR,OAAO,CAACS,OAAO,GAAGZ,MAAM,CAACY,OAAO,CAACC,qBAAqB,CAACZ,KAAK,EAAEI,EAAE,CAACO,OAAO,EAAEV,QAAQ,CAAC;EACrF,CAAC,EAAE,CAACF,MAAM,EAAEE,QAAQ,EAAED,KAAK,CAAC,CAAC;EAC7BH,cAAc,CAAC,YAAM;IACnBY,oBAAoB,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,IAAMI,aAAa,GAAGjB,KAAK,CAACO,MAAM,CAAC,IAAI,CAAC;EACxCP,KAAK,CAACkB,SAAS,CAAC,YAAM;IACpB,IAAID,aAAa,CAACF,OAAO,EAAE;MACzBE,aAAa,CAACF,OAAO,GAAG,KAAK;IAC/B,CAAC,MAAM;MACLF,oBAAoB,CAAC,CAAC;IACxB;IACA,OAAO,YAAM;MACX,IAAIP,OAAO,CAACS,OAAO,EAAE;QACnBT,OAAO,CAACS,OAAO,CAAC,CAAC;QACjBT,OAAO,CAACS,OAAO,GAAG,IAAI;MACxB;IACF,CAAC;EACH,CAAC,EAAE,CAACF,oBAAoB,CAAC,CAAC;AAC5B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}